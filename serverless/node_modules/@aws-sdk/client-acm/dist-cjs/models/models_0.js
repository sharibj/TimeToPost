"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportCertificateRequestFilterSensitiveLog = exports.ExportCertificateResponseFilterSensitiveLog = exports.ExportCertificateRequestFilterSensitiveLog = exports.InvalidStateException = exports.InvalidDomainValidationOptionsException = exports.ValidationException = exports.SortOrder = exports.SortBy = exports.InvalidArgsException = exports.LimitExceededException = exports.RequestInProgressException = exports.ResourceInUseException = exports.ConflictException = exports.CertificateType = exports.CertificateStatus = exports.RevocationReason = exports.RenewalStatus = exports.RenewalEligibility = exports.CertificateTransparencyLoggingPreference = exports.KeyUsageName = exports.KeyAlgorithm = exports.FailureReason = exports.ExtendedKeyUsageName = exports.DomainStatus = exports.ValidationMethod = exports.RecordType = exports.TooManyTagsException = exports.ThrottlingException = exports.TagPolicyException = exports.ResourceNotFoundException = exports.InvalidTagException = exports.InvalidParameterException = exports.InvalidArnException = exports.AccessDeniedException = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const ACMServiceException_1 = require("./ACMServiceException");
class AccessDeniedException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccessDeniedException = AccessDeniedException;
class InvalidArnException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "InvalidArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArnException.prototype);
    }
}
exports.InvalidArnException = InvalidArnException;
class InvalidParameterException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
exports.InvalidParameterException = InvalidParameterException;
class InvalidTagException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "InvalidTagException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTagException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagException.prototype);
    }
}
exports.InvalidTagException = InvalidTagException;
class ResourceNotFoundException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class TagPolicyException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "TagPolicyException",
            $fault: "client",
            ...opts,
        });
        this.name = "TagPolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagPolicyException.prototype);
    }
}
exports.TagPolicyException = TagPolicyException;
class ThrottlingException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
exports.ThrottlingException = ThrottlingException;
class TooManyTagsException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
exports.TooManyTagsException = TooManyTagsException;
exports.RecordType = {
    CNAME: "CNAME",
};
exports.ValidationMethod = {
    DNS: "DNS",
    EMAIL: "EMAIL",
};
exports.DomainStatus = {
    FAILED: "FAILED",
    PENDING_VALIDATION: "PENDING_VALIDATION",
    SUCCESS: "SUCCESS",
};
exports.ExtendedKeyUsageName = {
    ANY: "ANY",
    CODE_SIGNING: "CODE_SIGNING",
    CUSTOM: "CUSTOM",
    EMAIL_PROTECTION: "EMAIL_PROTECTION",
    IPSEC_END_SYSTEM: "IPSEC_END_SYSTEM",
    IPSEC_TUNNEL: "IPSEC_TUNNEL",
    IPSEC_USER: "IPSEC_USER",
    NONE: "NONE",
    OCSP_SIGNING: "OCSP_SIGNING",
    TIME_STAMPING: "TIME_STAMPING",
    TLS_WEB_CLIENT_AUTHENTICATION: "TLS_WEB_CLIENT_AUTHENTICATION",
    TLS_WEB_SERVER_AUTHENTICATION: "TLS_WEB_SERVER_AUTHENTICATION",
};
exports.FailureReason = {
    ADDITIONAL_VERIFICATION_REQUIRED: "ADDITIONAL_VERIFICATION_REQUIRED",
    CAA_ERROR: "CAA_ERROR",
    DOMAIN_NOT_ALLOWED: "DOMAIN_NOT_ALLOWED",
    DOMAIN_VALIDATION_DENIED: "DOMAIN_VALIDATION_DENIED",
    INVALID_PUBLIC_DOMAIN: "INVALID_PUBLIC_DOMAIN",
    NO_AVAILABLE_CONTACTS: "NO_AVAILABLE_CONTACTS",
    OTHER: "OTHER",
    PCA_ACCESS_DENIED: "PCA_ACCESS_DENIED",
    PCA_INVALID_ARGS: "PCA_INVALID_ARGS",
    PCA_INVALID_ARN: "PCA_INVALID_ARN",
    PCA_INVALID_DURATION: "PCA_INVALID_DURATION",
    PCA_INVALID_STATE: "PCA_INVALID_STATE",
    PCA_LIMIT_EXCEEDED: "PCA_LIMIT_EXCEEDED",
    PCA_NAME_CONSTRAINTS_VALIDATION: "PCA_NAME_CONSTRAINTS_VALIDATION",
    PCA_REQUEST_FAILED: "PCA_REQUEST_FAILED",
    PCA_RESOURCE_NOT_FOUND: "PCA_RESOURCE_NOT_FOUND",
    SLR_NOT_FOUND: "SLR_NOT_FOUND",
};
exports.KeyAlgorithm = {
    EC_prime256v1: "EC_prime256v1",
    EC_secp384r1: "EC_secp384r1",
    EC_secp521r1: "EC_secp521r1",
    RSA_1024: "RSA_1024",
    RSA_2048: "RSA_2048",
    RSA_3072: "RSA_3072",
    RSA_4096: "RSA_4096",
};
exports.KeyUsageName = {
    ANY: "ANY",
    CERTIFICATE_SIGNING: "CERTIFICATE_SIGNING",
    CRL_SIGNING: "CRL_SIGNING",
    CUSTOM: "CUSTOM",
    DATA_ENCIPHERMENT: "DATA_ENCIPHERMENT",
    DECIPHER_ONLY: "DECIPHER_ONLY",
    DIGITAL_SIGNATURE: "DIGITAL_SIGNATURE",
    ENCHIPER_ONLY: "ENCIPHER_ONLY",
    KEY_AGREEMENT: "KEY_AGREEMENT",
    KEY_ENCIPHERMENT: "KEY_ENCIPHERMENT",
    NON_REPUDATION: "NON_REPUDIATION",
};
exports.CertificateTransparencyLoggingPreference = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
exports.RenewalEligibility = {
    ELIGIBLE: "ELIGIBLE",
    INELIGIBLE: "INELIGIBLE",
};
exports.RenewalStatus = {
    FAILED: "FAILED",
    PENDING_AUTO_RENEWAL: "PENDING_AUTO_RENEWAL",
    PENDING_VALIDATION: "PENDING_VALIDATION",
    SUCCESS: "SUCCESS",
};
exports.RevocationReason = {
    AFFILIATION_CHANGED: "AFFILIATION_CHANGED",
    A_A_COMPROMISE: "A_A_COMPROMISE",
    CA_COMPROMISE: "CA_COMPROMISE",
    CERTIFICATE_HOLD: "CERTIFICATE_HOLD",
    CESSATION_OF_OPERATION: "CESSATION_OF_OPERATION",
    KEY_COMPROMISE: "KEY_COMPROMISE",
    PRIVILEGE_WITHDRAWN: "PRIVILEGE_WITHDRAWN",
    REMOVE_FROM_CRL: "REMOVE_FROM_CRL",
    SUPERCEDED: "SUPERCEDED",
    UNSPECIFIED: "UNSPECIFIED",
};
exports.CertificateStatus = {
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    INACTIVE: "INACTIVE",
    ISSUED: "ISSUED",
    PENDING_VALIDATION: "PENDING_VALIDATION",
    REVOKED: "REVOKED",
    VALIDATION_TIMED_OUT: "VALIDATION_TIMED_OUT",
};
exports.CertificateType = {
    AMAZON_ISSUED: "AMAZON_ISSUED",
    IMPORTED: "IMPORTED",
    PRIVATE: "PRIVATE",
};
class ConflictException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
exports.ConflictException = ConflictException;
class ResourceInUseException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
exports.ResourceInUseException = ResourceInUseException;
class RequestInProgressException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "RequestInProgressException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestInProgressException.prototype);
    }
}
exports.RequestInProgressException = RequestInProgressException;
class LimitExceededException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
exports.LimitExceededException = LimitExceededException;
class InvalidArgsException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "InvalidArgsException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArgsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArgsException.prototype);
    }
}
exports.InvalidArgsException = InvalidArgsException;
exports.SortBy = {
    CREATED_AT: "CREATED_AT",
};
exports.SortOrder = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
class ValidationException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
exports.ValidationException = ValidationException;
class InvalidDomainValidationOptionsException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "InvalidDomainValidationOptionsException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDomainValidationOptionsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDomainValidationOptionsException.prototype);
    }
}
exports.InvalidDomainValidationOptionsException = InvalidDomainValidationOptionsException;
class InvalidStateException extends ACMServiceException_1.ACMServiceException {
    constructor(opts) {
        super({
            name: "InvalidStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidStateException.prototype);
    }
}
exports.InvalidStateException = InvalidStateException;
const ExportCertificateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Passphrase && { Passphrase: smithy_client_1.SENSITIVE_STRING }),
});
exports.ExportCertificateRequestFilterSensitiveLog = ExportCertificateRequestFilterSensitiveLog;
const ExportCertificateResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PrivateKey && { PrivateKey: smithy_client_1.SENSITIVE_STRING }),
});
exports.ExportCertificateResponseFilterSensitiveLog = ExportCertificateResponseFilterSensitiveLog;
const ImportCertificateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PrivateKey && { PrivateKey: smithy_client_1.SENSITIVE_STRING }),
});
exports.ImportCertificateRequestFilterSensitiveLog = ImportCertificateRequestFilterSensitiveLog;
