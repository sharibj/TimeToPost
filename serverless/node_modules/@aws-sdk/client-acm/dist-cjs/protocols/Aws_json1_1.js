"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_UpdateCertificateOptionsCommand = exports.de_ResendValidationEmailCommand = exports.de_RequestCertificateCommand = exports.de_RenewCertificateCommand = exports.de_RemoveTagsFromCertificateCommand = exports.de_PutAccountConfigurationCommand = exports.de_ListTagsForCertificateCommand = exports.de_ListCertificatesCommand = exports.de_ImportCertificateCommand = exports.de_GetCertificateCommand = exports.de_GetAccountConfigurationCommand = exports.de_ExportCertificateCommand = exports.de_DescribeCertificateCommand = exports.de_DeleteCertificateCommand = exports.de_AddTagsToCertificateCommand = exports.se_UpdateCertificateOptionsCommand = exports.se_ResendValidationEmailCommand = exports.se_RequestCertificateCommand = exports.se_RenewCertificateCommand = exports.se_RemoveTagsFromCertificateCommand = exports.se_PutAccountConfigurationCommand = exports.se_ListTagsForCertificateCommand = exports.se_ListCertificatesCommand = exports.se_ImportCertificateCommand = exports.se_GetCertificateCommand = exports.se_GetAccountConfigurationCommand = exports.se_ExportCertificateCommand = exports.se_DescribeCertificateCommand = exports.se_DeleteCertificateCommand = exports.se_AddTagsToCertificateCommand = void 0;
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const ACMServiceException_1 = require("../models/ACMServiceException");
const models_0_1 = require("../models/models_0");
const se_AddTagsToCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("AddTagsToCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AddTagsToCertificateCommand = se_AddTagsToCertificateCommand;
const se_DeleteCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteCertificateCommand = se_DeleteCertificateCommand;
const se_DescribeCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeCertificateCommand = se_DescribeCertificateCommand;
const se_ExportCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("ExportCertificate");
    let body;
    body = JSON.stringify(se_ExportCertificateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ExportCertificateCommand = se_ExportCertificateCommand;
const se_GetAccountConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetAccountConfiguration");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAccountConfigurationCommand = se_GetAccountConfigurationCommand;
const se_GetCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("GetCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCertificateCommand = se_GetCertificateCommand;
const se_ImportCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("ImportCertificate");
    let body;
    body = JSON.stringify(se_ImportCertificateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ImportCertificateCommand = se_ImportCertificateCommand;
const se_ListCertificatesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCertificates");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListCertificatesCommand = se_ListCertificatesCommand;
const se_ListTagsForCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForCertificateCommand = se_ListTagsForCertificateCommand;
const se_PutAccountConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutAccountConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutAccountConfigurationCommand = se_PutAccountConfigurationCommand;
const se_RemoveTagsFromCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveTagsFromCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RemoveTagsFromCertificateCommand = se_RemoveTagsFromCertificateCommand;
const se_RenewCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("RenewCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RenewCertificateCommand = se_RenewCertificateCommand;
const se_RequestCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("RequestCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RequestCertificateCommand = se_RequestCertificateCommand;
const se_ResendValidationEmailCommand = async (input, context) => {
    const headers = sharedHeaders("ResendValidationEmail");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ResendValidationEmailCommand = se_ResendValidationEmailCommand;
const se_UpdateCertificateOptionsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCertificateOptions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateCertificateOptionsCommand = se_UpdateCertificateOptionsCommand;
const de_AddTagsToCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AddTagsToCertificateCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_AddTagsToCertificateCommand = de_AddTagsToCertificateCommand;
const de_AddTagsToCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.acm#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidTagException":
        case "com.amazonaws.acm#InvalidTagException":
            throw await de_InvalidTagExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TagPolicyException":
        case "com.amazonaws.acm#TagPolicyException":
            throw await de_TagPolicyExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.acm#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.acm#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCertificateCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteCertificateCommand = de_DeleteCertificateCommand;
const de_DeleteCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.acm#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.acm#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.acm#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.acm#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCertificateResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeCertificateCommand = de_DescribeCertificateCommand;
const de_DescribeCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ExportCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ExportCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ExportCertificateCommand = de_ExportCertificateCommand;
const de_ExportCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "RequestInProgressException":
        case "com.amazonaws.acm#RequestInProgressException":
            throw await de_RequestInProgressExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetAccountConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAccountConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetAccountConfigurationCommand = de_GetAccountConfigurationCommand;
const de_GetAccountConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.acm#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.acm#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCertificateCommand = de_GetCertificateCommand;
const de_GetCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "RequestInProgressException":
        case "com.amazonaws.acm#RequestInProgressException":
            throw await de_RequestInProgressExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ImportCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ImportCertificateCommand = de_ImportCertificateCommand;
const de_ImportCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.acm#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidTagException":
        case "com.amazonaws.acm#InvalidTagException":
            throw await de_InvalidTagExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.acm#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TagPolicyException":
        case "com.amazonaws.acm#TagPolicyException":
            throw await de_TagPolicyExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.acm#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListCertificatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCertificatesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListCertificatesCommand = de_ListCertificatesCommand;
const de_ListCertificatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgsException":
        case "com.amazonaws.acm#InvalidArgsException":
            throw await de_InvalidArgsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.acm#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTagsForCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTagsForCertificateCommand = de_ListTagsForCertificateCommand;
const de_ListTagsForCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutAccountConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutAccountConfigurationCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_PutAccountConfigurationCommand = de_PutAccountConfigurationCommand;
const de_PutAccountConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.acm#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.acm#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.acm#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.acm#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RemoveTagsFromCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RemoveTagsFromCertificateCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_RemoveTagsFromCertificateCommand = de_RemoveTagsFromCertificateCommand;
const de_RemoveTagsFromCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.acm#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidTagException":
        case "com.amazonaws.acm#InvalidTagException":
            throw await de_InvalidTagExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TagPolicyException":
        case "com.amazonaws.acm#TagPolicyException":
            throw await de_TagPolicyExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.acm#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RenewCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RenewCertificateCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_RenewCertificateCommand = de_RenewCertificateCommand;
const de_RenewCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RequestCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RequestCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RequestCertificateCommand = de_RequestCertificateCommand;
const de_RequestCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "InvalidDomainValidationOptionsException":
        case "com.amazonaws.acm#InvalidDomainValidationOptionsException":
            throw await de_InvalidDomainValidationOptionsExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.acm#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidTagException":
        case "com.amazonaws.acm#InvalidTagException":
            throw await de_InvalidTagExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.acm#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TagPolicyException":
        case "com.amazonaws.acm#TagPolicyException":
            throw await de_TagPolicyExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.acm#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ResendValidationEmailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResendValidationEmailCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_ResendValidationEmailCommand = de_ResendValidationEmailCommand;
const de_ResendValidationEmailCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "InvalidDomainValidationOptionsException":
        case "com.amazonaws.acm#InvalidDomainValidationOptionsException":
            throw await de_InvalidDomainValidationOptionsExceptionRes(parsedOutput, context);
        case "InvalidStateException":
        case "com.amazonaws.acm#InvalidStateException":
            throw await de_InvalidStateExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateCertificateOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateCertificateOptionsCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_UpdateCertificateOptionsCommand = de_UpdateCertificateOptionsCommand;
const de_UpdateCertificateOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.acm#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "InvalidStateException":
        case "com.amazonaws.acm#InvalidStateException":
            throw await de_InvalidStateExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.acm#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acm#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidArgsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidArgsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidArnExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDomainValidationOptionsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidDomainValidationOptionsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidTagExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidTagException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RequestInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.RequestInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TagPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TagPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_ExportCertificateRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CertificateArn: [],
        Passphrase: context.base64Encoder,
    });
};
const se_ImportCertificateRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Certificate: context.base64Encoder,
        CertificateArn: [],
        CertificateChain: context.base64Encoder,
        PrivateKey: context.base64Encoder,
        Tags: smithy_client_1._json,
    });
};
const de_CertificateDetail = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CertificateArn: smithy_client_1.expectString,
        CertificateAuthorityArn: smithy_client_1.expectString,
        CreatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DomainName: smithy_client_1.expectString,
        DomainValidationOptions: smithy_client_1._json,
        ExtendedKeyUsages: smithy_client_1._json,
        FailureReason: smithy_client_1.expectString,
        ImportedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        InUseBy: smithy_client_1._json,
        IssuedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Issuer: smithy_client_1.expectString,
        KeyAlgorithm: smithy_client_1.expectString,
        KeyUsages: smithy_client_1._json,
        NotAfter: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        NotBefore: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Options: smithy_client_1._json,
        RenewalEligibility: smithy_client_1.expectString,
        RenewalSummary: (_) => de_RenewalSummary(_, context),
        RevocationReason: smithy_client_1.expectString,
        RevokedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Serial: smithy_client_1.expectString,
        SignatureAlgorithm: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        Subject: smithy_client_1.expectString,
        SubjectAlternativeNames: smithy_client_1._json,
        Type: smithy_client_1.expectString,
    });
};
const de_CertificateSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CertificateArn: smithy_client_1.expectString,
        CreatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DomainName: smithy_client_1.expectString,
        Exported: smithy_client_1.expectBoolean,
        ExtendedKeyUsages: smithy_client_1._json,
        HasAdditionalSubjectAlternativeNames: smithy_client_1.expectBoolean,
        ImportedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        InUse: smithy_client_1.expectBoolean,
        IssuedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        KeyAlgorithm: smithy_client_1.expectString,
        KeyUsages: smithy_client_1._json,
        NotAfter: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        NotBefore: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        RenewalEligibility: smithy_client_1.expectString,
        RevokedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        SubjectAlternativeNameSummaries: smithy_client_1._json,
        Type: smithy_client_1.expectString,
    });
};
const de_CertificateSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CertificateSummary(entry, context);
    });
    return retVal;
};
const de_DescribeCertificateResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Certificate: (_) => de_CertificateDetail(_, context),
    });
};
const de_ListCertificatesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CertificateSummaryList: (_) => de_CertificateSummaryList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_RenewalSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DomainValidationOptions: smithy_client_1._json,
        RenewalStatus: smithy_client_1.expectString,
        RenewalStatusReason: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(ACMServiceException_1.ACMServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `CertificateManager.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
