"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TooManyRequestsException = exports.NotFoundException = exports.ConflictException = exports.BadRequestException = exports.AccessDeniedException = exports.VpcLinkVersion = exports.VpcLinkStatus = exports.LoggingLevel = exports.AuthorizationType = exports.PassthroughBehavior = exports.IntegrationType = exports.ContentHandlingStrategy = exports.ConnectionType = exports.SecurityPolicy = exports.EndpointType = exports.DomainNameStatus = exports.DeploymentStatus = exports.AuthorizerType = exports.ProtocolType = void 0;
const ApiGatewayV2ServiceException_1 = require("./ApiGatewayV2ServiceException");
exports.ProtocolType = {
    HTTP: "HTTP",
    WEBSOCKET: "WEBSOCKET",
};
exports.AuthorizerType = {
    JWT: "JWT",
    REQUEST: "REQUEST",
};
exports.DeploymentStatus = {
    DEPLOYED: "DEPLOYED",
    FAILED: "FAILED",
    PENDING: "PENDING",
};
exports.DomainNameStatus = {
    AVAILABLE: "AVAILABLE",
    PENDING_CERTIFICATE_REIMPORT: "PENDING_CERTIFICATE_REIMPORT",
    PENDING_OWNERSHIP_VERIFICATION: "PENDING_OWNERSHIP_VERIFICATION",
    UPDATING: "UPDATING",
};
exports.EndpointType = {
    EDGE: "EDGE",
    REGIONAL: "REGIONAL",
};
exports.SecurityPolicy = {
    TLS_1_0: "TLS_1_0",
    TLS_1_2: "TLS_1_2",
};
exports.ConnectionType = {
    INTERNET: "INTERNET",
    VPC_LINK: "VPC_LINK",
};
exports.ContentHandlingStrategy = {
    CONVERT_TO_BINARY: "CONVERT_TO_BINARY",
    CONVERT_TO_TEXT: "CONVERT_TO_TEXT",
};
exports.IntegrationType = {
    AWS: "AWS",
    AWS_PROXY: "AWS_PROXY",
    HTTP: "HTTP",
    HTTP_PROXY: "HTTP_PROXY",
    MOCK: "MOCK",
};
exports.PassthroughBehavior = {
    NEVER: "NEVER",
    WHEN_NO_MATCH: "WHEN_NO_MATCH",
    WHEN_NO_TEMPLATES: "WHEN_NO_TEMPLATES",
};
exports.AuthorizationType = {
    AWS_IAM: "AWS_IAM",
    CUSTOM: "CUSTOM",
    JWT: "JWT",
    NONE: "NONE",
};
exports.LoggingLevel = {
    ERROR: "ERROR",
    INFO: "INFO",
    OFF: "OFF",
};
exports.VpcLinkStatus = {
    AVAILABLE: "AVAILABLE",
    DELETING: "DELETING",
    FAILED: "FAILED",
    INACTIVE: "INACTIVE",
    PENDING: "PENDING",
};
exports.VpcLinkVersion = {
    V2: "V2",
};
class AccessDeniedException extends ApiGatewayV2ServiceException_1.ApiGatewayV2ServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccessDeniedException = AccessDeniedException;
class BadRequestException extends ApiGatewayV2ServiceException_1.ApiGatewayV2ServiceException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
exports.BadRequestException = BadRequestException;
class ConflictException extends ApiGatewayV2ServiceException_1.ApiGatewayV2ServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConflictException = ConflictException;
class NotFoundException extends ApiGatewayV2ServiceException_1.ApiGatewayV2ServiceException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
    }
}
exports.NotFoundException = NotFoundException;
class TooManyRequestsException extends ApiGatewayV2ServiceException_1.ApiGatewayV2ServiceException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.LimitType = opts.LimitType;
        this.Message = opts.Message;
    }
}
exports.TooManyRequestsException = TooManyRequestsException;
