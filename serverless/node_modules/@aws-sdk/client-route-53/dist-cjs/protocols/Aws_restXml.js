"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.se_ListGeoLocationsCommand = exports.se_ListCidrLocationsCommand = exports.se_ListCidrCollectionsCommand = exports.se_ListCidrBlocksCommand = exports.se_GetTrafficPolicyInstanceCountCommand = exports.se_GetTrafficPolicyInstanceCommand = exports.se_GetTrafficPolicyCommand = exports.se_GetReusableDelegationSetLimitCommand = exports.se_GetReusableDelegationSetCommand = exports.se_GetQueryLoggingConfigCommand = exports.se_GetHostedZoneLimitCommand = exports.se_GetHostedZoneCountCommand = exports.se_GetHostedZoneCommand = exports.se_GetHealthCheckStatusCommand = exports.se_GetHealthCheckLastFailureReasonCommand = exports.se_GetHealthCheckCountCommand = exports.se_GetHealthCheckCommand = exports.se_GetGeoLocationCommand = exports.se_GetDNSSECCommand = exports.se_GetCheckerIpRangesCommand = exports.se_GetChangeCommand = exports.se_GetAccountLimitCommand = exports.se_EnableHostedZoneDNSSECCommand = exports.se_DisassociateVPCFromHostedZoneCommand = exports.se_DisableHostedZoneDNSSECCommand = exports.se_DeleteVPCAssociationAuthorizationCommand = exports.se_DeleteTrafficPolicyInstanceCommand = exports.se_DeleteTrafficPolicyCommand = exports.se_DeleteReusableDelegationSetCommand = exports.se_DeleteQueryLoggingConfigCommand = exports.se_DeleteKeySigningKeyCommand = exports.se_DeleteHostedZoneCommand = exports.se_DeleteHealthCheckCommand = exports.se_DeleteCidrCollectionCommand = exports.se_DeactivateKeySigningKeyCommand = exports.se_CreateVPCAssociationAuthorizationCommand = exports.se_CreateTrafficPolicyVersionCommand = exports.se_CreateTrafficPolicyInstanceCommand = exports.se_CreateTrafficPolicyCommand = exports.se_CreateReusableDelegationSetCommand = exports.se_CreateQueryLoggingConfigCommand = exports.se_CreateKeySigningKeyCommand = exports.se_CreateHostedZoneCommand = exports.se_CreateHealthCheckCommand = exports.se_CreateCidrCollectionCommand = exports.se_ChangeTagsForResourceCommand = exports.se_ChangeResourceRecordSetsCommand = exports.se_ChangeCidrCollectionCommand = exports.se_AssociateVPCWithHostedZoneCommand = exports.se_ActivateKeySigningKeyCommand = void 0;
exports.de_GetChangeCommand = exports.de_GetAccountLimitCommand = exports.de_EnableHostedZoneDNSSECCommand = exports.de_DisassociateVPCFromHostedZoneCommand = exports.de_DisableHostedZoneDNSSECCommand = exports.de_DeleteVPCAssociationAuthorizationCommand = exports.de_DeleteTrafficPolicyInstanceCommand = exports.de_DeleteTrafficPolicyCommand = exports.de_DeleteReusableDelegationSetCommand = exports.de_DeleteQueryLoggingConfigCommand = exports.de_DeleteKeySigningKeyCommand = exports.de_DeleteHostedZoneCommand = exports.de_DeleteHealthCheckCommand = exports.de_DeleteCidrCollectionCommand = exports.de_DeactivateKeySigningKeyCommand = exports.de_CreateVPCAssociationAuthorizationCommand = exports.de_CreateTrafficPolicyVersionCommand = exports.de_CreateTrafficPolicyInstanceCommand = exports.de_CreateTrafficPolicyCommand = exports.de_CreateReusableDelegationSetCommand = exports.de_CreateQueryLoggingConfigCommand = exports.de_CreateKeySigningKeyCommand = exports.de_CreateHostedZoneCommand = exports.de_CreateHealthCheckCommand = exports.de_CreateCidrCollectionCommand = exports.de_ChangeTagsForResourceCommand = exports.de_ChangeResourceRecordSetsCommand = exports.de_ChangeCidrCollectionCommand = exports.de_AssociateVPCWithHostedZoneCommand = exports.de_ActivateKeySigningKeyCommand = exports.se_UpdateTrafficPolicyInstanceCommand = exports.se_UpdateTrafficPolicyCommentCommand = exports.se_UpdateHostedZoneCommentCommand = exports.se_UpdateHealthCheckCommand = exports.se_TestDNSAnswerCommand = exports.se_ListVPCAssociationAuthorizationsCommand = exports.se_ListTrafficPolicyVersionsCommand = exports.se_ListTrafficPolicyInstancesByPolicyCommand = exports.se_ListTrafficPolicyInstancesByHostedZoneCommand = exports.se_ListTrafficPolicyInstancesCommand = exports.se_ListTrafficPoliciesCommand = exports.se_ListTagsForResourcesCommand = exports.se_ListTagsForResourceCommand = exports.se_ListReusableDelegationSetsCommand = exports.se_ListResourceRecordSetsCommand = exports.se_ListQueryLoggingConfigsCommand = exports.se_ListHostedZonesByVPCCommand = exports.se_ListHostedZonesByNameCommand = exports.se_ListHostedZonesCommand = exports.se_ListHealthChecksCommand = void 0;
exports.de_UpdateTrafficPolicyInstanceCommand = exports.de_UpdateTrafficPolicyCommentCommand = exports.de_UpdateHostedZoneCommentCommand = exports.de_UpdateHealthCheckCommand = exports.de_TestDNSAnswerCommand = exports.de_ListVPCAssociationAuthorizationsCommand = exports.de_ListTrafficPolicyVersionsCommand = exports.de_ListTrafficPolicyInstancesByPolicyCommand = exports.de_ListTrafficPolicyInstancesByHostedZoneCommand = exports.de_ListTrafficPolicyInstancesCommand = exports.de_ListTrafficPoliciesCommand = exports.de_ListTagsForResourcesCommand = exports.de_ListTagsForResourceCommand = exports.de_ListReusableDelegationSetsCommand = exports.de_ListResourceRecordSetsCommand = exports.de_ListQueryLoggingConfigsCommand = exports.de_ListHostedZonesByVPCCommand = exports.de_ListHostedZonesByNameCommand = exports.de_ListHostedZonesCommand = exports.de_ListHealthChecksCommand = exports.de_ListGeoLocationsCommand = exports.de_ListCidrLocationsCommand = exports.de_ListCidrCollectionsCommand = exports.de_ListCidrBlocksCommand = exports.de_GetTrafficPolicyInstanceCountCommand = exports.de_GetTrafficPolicyInstanceCommand = exports.de_GetTrafficPolicyCommand = exports.de_GetReusableDelegationSetLimitCommand = exports.de_GetReusableDelegationSetCommand = exports.de_GetQueryLoggingConfigCommand = exports.de_GetHostedZoneLimitCommand = exports.de_GetHostedZoneCountCommand = exports.de_GetHostedZoneCommand = exports.de_GetHealthCheckStatusCommand = exports.de_GetHealthCheckLastFailureReasonCommand = exports.de_GetHealthCheckCountCommand = exports.de_GetHealthCheckCommand = exports.de_GetGeoLocationCommand = exports.de_GetDNSSECCommand = exports.de_GetCheckerIpRangesCommand = void 0;
const xml_builder_1 = require("@aws-sdk/xml-builder");
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const fast_xml_parser_1 = require("fast-xml-parser");
const models_0_1 = require("../models/models_0");
const Route53ServiceException_1 = require("../models/Route53ServiceException");
const se_ActivateKeySigningKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/activate";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_ActivateKeySigningKeyCommand = se_ActivateKeySigningKeyCommand;
const se_AssociateVPCWithHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/associatevpc";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("AssociateVPCWithHostedZoneRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("AssociateVPCComment", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.VPC !== undefined) {
        const node = se_VPC(input.VPC, context).withName("VPC");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_AssociateVPCWithHostedZoneCommand = se_AssociateVPCWithHostedZoneCommand;
const se_ChangeCidrCollectionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/cidrcollection/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("ChangeCidrCollectionRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Changes !== undefined) {
        const nodes = se_CidrCollectionChanges(input.Changes, context);
        const containerNode = new xml_builder_1.XmlNode("Changes");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.CollectionVersion !== undefined) {
        const node = xml_builder_1.XmlNode.of("CollectionVersion", String(input.CollectionVersion)).withName("CollectionVersion");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_ChangeCidrCollectionCommand = se_ChangeCidrCollectionCommand;
const se_ChangeResourceRecordSetsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/rrset";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("ChangeResourceRecordSetsRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.ChangeBatch !== undefined) {
        const node = se_ChangeBatch(input.ChangeBatch, context).withName("ChangeBatch");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_ChangeResourceRecordSetsCommand = se_ChangeResourceRecordSetsCommand;
const se_ChangeTagsForResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/tags/{ResourceType}/{ResourceId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceType", () => input.ResourceType, "{ResourceType}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceId", () => input.ResourceId, "{ResourceId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("ChangeTagsForResourceRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.AddTags !== undefined) {
        const nodes = se_TagList(input.AddTags, context);
        const containerNode = new xml_builder_1.XmlNode("AddTags");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.RemoveTagKeys !== undefined) {
        const nodes = se_TagKeyList(input.RemoveTagKeys, context);
        const containerNode = new xml_builder_1.XmlNode("RemoveTagKeys");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_ChangeTagsForResourceCommand = se_ChangeTagsForResourceCommand;
const se_CreateCidrCollectionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/cidrcollection";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateCidrCollectionRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CallerReference !== undefined) {
        const node = xml_builder_1.XmlNode.of("CidrNonce", input.CallerReference).withName("CallerReference");
        bodyNode.addChildNode(node);
    }
    if (input.Name !== undefined) {
        const node = xml_builder_1.XmlNode.of("CollectionName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_CreateCidrCollectionCommand = se_CreateCidrCollectionCommand;
const se_CreateHealthCheckCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheck";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateHealthCheckRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CallerReference !== undefined) {
        const node = xml_builder_1.XmlNode.of("HealthCheckNonce", input.CallerReference).withName("CallerReference");
        bodyNode.addChildNode(node);
    }
    if (input.HealthCheckConfig !== undefined) {
        const node = se_HealthCheckConfig(input.HealthCheckConfig, context).withName("HealthCheckConfig");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_CreateHealthCheckCommand = se_CreateHealthCheckCommand;
const se_CreateHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzone";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateHostedZoneRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CallerReference !== undefined) {
        const node = xml_builder_1.XmlNode.of("Nonce", input.CallerReference).withName("CallerReference");
        bodyNode.addChildNode(node);
    }
    if (input.DelegationSetId !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.DelegationSetId).withName("DelegationSetId");
        bodyNode.addChildNode(node);
    }
    if (input.HostedZoneConfig !== undefined) {
        const node = se_HostedZoneConfig(input.HostedZoneConfig, context).withName("HostedZoneConfig");
        bodyNode.addChildNode(node);
    }
    if (input.Name !== undefined) {
        const node = xml_builder_1.XmlNode.of("DNSName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.VPC !== undefined) {
        const node = se_VPC(input.VPC, context).withName("VPC");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_CreateHostedZoneCommand = se_CreateHostedZoneCommand;
const se_CreateKeySigningKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/keysigningkey";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateKeySigningKeyRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CallerReference !== undefined) {
        const node = xml_builder_1.XmlNode.of("Nonce", input.CallerReference).withName("CallerReference");
        bodyNode.addChildNode(node);
    }
    if (input.HostedZoneId !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
        bodyNode.addChildNode(node);
    }
    if (input.KeyManagementServiceArn !== undefined) {
        const node = xml_builder_1.XmlNode.of("SigningKeyString", input.KeyManagementServiceArn).withName("KeyManagementServiceArn");
        bodyNode.addChildNode(node);
    }
    if (input.Name !== undefined) {
        const node = xml_builder_1.XmlNode.of("SigningKeyName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Status !== undefined) {
        const node = xml_builder_1.XmlNode.of("SigningKeyStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_CreateKeySigningKeyCommand = se_CreateKeySigningKeyCommand;
const se_CreateQueryLoggingConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/queryloggingconfig";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateQueryLoggingConfigRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CloudWatchLogsLogGroupArn !== undefined) {
        const node = xml_builder_1.XmlNode
            .of("CloudWatchLogsLogGroupArn", input.CloudWatchLogsLogGroupArn)
            .withName("CloudWatchLogsLogGroupArn");
        bodyNode.addChildNode(node);
    }
    if (input.HostedZoneId !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_CreateQueryLoggingConfigCommand = se_CreateQueryLoggingConfigCommand;
const se_CreateReusableDelegationSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/delegationset";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateReusableDelegationSetRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CallerReference !== undefined) {
        const node = xml_builder_1.XmlNode.of("Nonce", input.CallerReference).withName("CallerReference");
        bodyNode.addChildNode(node);
    }
    if (input.HostedZoneId !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_CreateReusableDelegationSetCommand = se_CreateReusableDelegationSetCommand;
const se_CreateTrafficPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicy";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateTrafficPolicyRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyComment", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.Document !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyDocument", input.Document).withName("Document");
        bodyNode.addChildNode(node);
    }
    if (input.Name !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_CreateTrafficPolicyCommand = se_CreateTrafficPolicyCommand;
const se_CreateTrafficPolicyInstanceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstance";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateTrafficPolicyInstanceRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.HostedZoneId !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
        bodyNode.addChildNode(node);
    }
    if (input.Name !== undefined) {
        const node = xml_builder_1.XmlNode.of("DNSName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.TTL !== undefined) {
        const node = xml_builder_1.XmlNode.of("TTL", String(input.TTL)).withName("TTL");
        bodyNode.addChildNode(node);
    }
    if (input.TrafficPolicyId !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyId", input.TrafficPolicyId).withName("TrafficPolicyId");
        bodyNode.addChildNode(node);
    }
    if (input.TrafficPolicyVersion !== undefined) {
        const node = xml_builder_1.XmlNode
            .of("TrafficPolicyVersion", String(input.TrafficPolicyVersion))
            .withName("TrafficPolicyVersion");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_CreateTrafficPolicyInstanceCommand = se_CreateTrafficPolicyInstanceCommand;
const se_CreateTrafficPolicyVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicy/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateTrafficPolicyVersionRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyComment", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.Document !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyDocument", input.Document).withName("Document");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_CreateTrafficPolicyVersionCommand = se_CreateTrafficPolicyVersionCommand;
const se_CreateVPCAssociationAuthorizationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateVPCAssociationAuthorizationRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.VPC !== undefined) {
        const node = se_VPC(input.VPC, context).withName("VPC");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_CreateVPCAssociationAuthorizationCommand = se_CreateVPCAssociationAuthorizationCommand;
const se_DeactivateKeySigningKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/deactivate";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeactivateKeySigningKeyCommand = se_DeactivateKeySigningKeyCommand;
const se_DeleteCidrCollectionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/cidrcollection/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteCidrCollectionCommand = se_DeleteCidrCollectionCommand;
const se_DeleteHealthCheckCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheck/{HealthCheckId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteHealthCheckCommand = se_DeleteHealthCheckCommand;
const se_DeleteHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzone/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteHostedZoneCommand = se_DeleteHostedZoneCommand;
const se_DeleteKeySigningKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteKeySigningKeyCommand = se_DeleteKeySigningKeyCommand;
const se_DeleteQueryLoggingConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/queryloggingconfig/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteQueryLoggingConfigCommand = se_DeleteQueryLoggingConfigCommand;
const se_DeleteReusableDelegationSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/delegationset/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteReusableDelegationSetCommand = se_DeleteReusableDelegationSetCommand;
const se_DeleteTrafficPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicy/{Id}/{Version}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Version", () => input.Version.toString(), "{Version}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteTrafficPolicyCommand = se_DeleteTrafficPolicyCommand;
const se_DeleteTrafficPolicyInstanceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstance/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteTrafficPolicyInstanceCommand = se_DeleteTrafficPolicyInstanceCommand;
const se_DeleteVPCAssociationAuthorizationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/deauthorizevpcassociation";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("DeleteVPCAssociationAuthorizationRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.VPC !== undefined) {
        const node = se_VPC(input.VPC, context).withName("VPC");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteVPCAssociationAuthorizationCommand = se_DeleteVPCAssociationAuthorizationCommand;
const se_DisableHostedZoneDNSSECCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/disable-dnssec";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DisableHostedZoneDNSSECCommand = se_DisableHostedZoneDNSSECCommand;
const se_DisassociateVPCFromHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/disassociatevpc";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("DisassociateVPCFromHostedZoneRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("DisassociateVPCComment", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.VPC !== undefined) {
        const node = se_VPC(input.VPC, context).withName("VPC");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DisassociateVPCFromHostedZoneCommand = se_DisassociateVPCFromHostedZoneCommand;
const se_EnableHostedZoneDNSSECCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/enable-dnssec";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_EnableHostedZoneDNSSECCommand = se_EnableHostedZoneDNSSECCommand;
const se_GetAccountLimitCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/accountlimit/{Type}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Type", () => input.Type, "{Type}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetAccountLimitCommand = se_GetAccountLimitCommand;
const se_GetChangeCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/change/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetChangeCommand = se_GetChangeCommand;
const se_GetCheckerIpRangesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/checkeripranges";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetCheckerIpRangesCommand = se_GetCheckerIpRangesCommand;
const se_GetDNSSECCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/dnssec";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetDNSSECCommand = se_GetDNSSECCommand;
const se_GetGeoLocationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/geolocation";
    const query = (0, smithy_client_1.map)({
        continentcode: [, input.ContinentCode],
        countrycode: [, input.CountryCode],
        subdivisioncode: [, input.SubdivisionCode],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_GetGeoLocationCommand = se_GetGeoLocationCommand;
const se_GetHealthCheckCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheck/{HealthCheckId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetHealthCheckCommand = se_GetHealthCheckCommand;
const se_GetHealthCheckCountCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheckcount";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetHealthCheckCountCommand = se_GetHealthCheckCountCommand;
const se_GetHealthCheckLastFailureReasonCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetHealthCheckLastFailureReasonCommand = se_GetHealthCheckLastFailureReasonCommand;
const se_GetHealthCheckStatusCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/healthcheck/{HealthCheckId}/status";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetHealthCheckStatusCommand = se_GetHealthCheckStatusCommand;
const se_GetHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzone/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetHostedZoneCommand = se_GetHostedZoneCommand;
const se_GetHostedZoneCountCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzonecount";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetHostedZoneCountCommand = se_GetHostedZoneCountCommand;
const se_GetHostedZoneLimitCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzonelimit/{HostedZoneId}/{Type}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Type", () => input.Type, "{Type}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetHostedZoneLimitCommand = se_GetHostedZoneLimitCommand;
const se_GetQueryLoggingConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/queryloggingconfig/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetQueryLoggingConfigCommand = se_GetQueryLoggingConfigCommand;
const se_GetReusableDelegationSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/delegationset/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetReusableDelegationSetCommand = se_GetReusableDelegationSetCommand;
const se_GetReusableDelegationSetLimitCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/reusabledelegationsetlimit/{DelegationSetId}/{Type}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Type", () => input.Type, "{Type}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DelegationSetId", () => input.DelegationSetId, "{DelegationSetId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetReusableDelegationSetLimitCommand = se_GetReusableDelegationSetLimitCommand;
const se_GetTrafficPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicy/{Id}/{Version}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Version", () => input.Version.toString(), "{Version}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetTrafficPolicyCommand = se_GetTrafficPolicyCommand;
const se_GetTrafficPolicyInstanceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstance/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetTrafficPolicyInstanceCommand = se_GetTrafficPolicyInstanceCommand;
const se_GetTrafficPolicyInstanceCountCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstancecount";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetTrafficPolicyInstanceCountCommand = se_GetTrafficPolicyInstanceCountCommand;
const se_ListCidrBlocksCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/cidrcollection/{CollectionId}/cidrblocks";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CollectionId", () => input.CollectionId, "{CollectionId}", false);
    const query = (0, smithy_client_1.map)({
        location: [, input.LocationName],
        nexttoken: [, input.NextToken],
        maxresults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListCidrBlocksCommand = se_ListCidrBlocksCommand;
const se_ListCidrCollectionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/cidrcollection";
    const query = (0, smithy_client_1.map)({
        nexttoken: [, input.NextToken],
        maxresults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListCidrCollectionsCommand = se_ListCidrCollectionsCommand;
const se_ListCidrLocationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/cidrcollection/{CollectionId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CollectionId", () => input.CollectionId, "{CollectionId}", false);
    const query = (0, smithy_client_1.map)({
        nexttoken: [, input.NextToken],
        maxresults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListCidrLocationsCommand = se_ListCidrLocationsCommand;
const se_ListGeoLocationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/geolocations";
    const query = (0, smithy_client_1.map)({
        startcontinentcode: [, input.StartContinentCode],
        startcountrycode: [, input.StartCountryCode],
        startsubdivisioncode: [, input.StartSubdivisionCode],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListGeoLocationsCommand = se_ListGeoLocationsCommand;
const se_ListHealthChecksCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheck";
    const query = (0, smithy_client_1.map)({
        marker: [, input.Marker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListHealthChecksCommand = se_ListHealthChecksCommand;
const se_ListHostedZonesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzone";
    const query = (0, smithy_client_1.map)({
        marker: [, input.Marker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        delegationsetid: [, input.DelegationSetId],
        hostedzonetype: [, input.HostedZoneType],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListHostedZonesCommand = se_ListHostedZonesCommand;
const se_ListHostedZonesByNameCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzonesbyname";
    const query = (0, smithy_client_1.map)({
        dnsname: [, input.DNSName],
        hostedzoneid: [, input.HostedZoneId],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListHostedZonesByNameCommand = se_ListHostedZonesByNameCommand;
const se_ListHostedZonesByVPCCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzonesbyvpc";
    const query = (0, smithy_client_1.map)({
        vpcid: [, (0, smithy_client_1.expectNonNull)(input.VPCId, `VPCId`)],
        vpcregion: [, (0, smithy_client_1.expectNonNull)(input.VPCRegion, `VPCRegion`)],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        nexttoken: [, input.NextToken],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListHostedZonesByVPCCommand = se_ListHostedZonesByVPCCommand;
const se_ListQueryLoggingConfigsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/queryloggingconfig";
    const query = (0, smithy_client_1.map)({
        hostedzoneid: [, input.HostedZoneId],
        nexttoken: [, input.NextToken],
        maxresults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListQueryLoggingConfigsCommand = se_ListQueryLoggingConfigsCommand;
const se_ListResourceRecordSetsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/rrset";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    const query = (0, smithy_client_1.map)({
        name: [, input.StartRecordName],
        type: [, input.StartRecordType],
        identifier: [, input.StartRecordIdentifier],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListResourceRecordSetsCommand = se_ListResourceRecordSetsCommand;
const se_ListReusableDelegationSetsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/delegationset";
    const query = (0, smithy_client_1.map)({
        marker: [, input.Marker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListReusableDelegationSetsCommand = se_ListReusableDelegationSetsCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/tags/{ResourceType}/{ResourceId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceType", () => input.ResourceType, "{ResourceType}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceId", () => input.ResourceId, "{ResourceId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_ListTagsForResourcesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/tags/{ResourceType}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceType", () => input.ResourceType, "{ResourceType}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("ListTagsForResourcesRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.ResourceIds !== undefined) {
        const nodes = se_TagResourceIdList(input.ResourceIds, context);
        const containerNode = new xml_builder_1.XmlNode("ResourceIds");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_ListTagsForResourcesCommand = se_ListTagsForResourcesCommand;
const se_ListTrafficPoliciesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicies";
    const query = (0, smithy_client_1.map)({
        trafficpolicyid: [, input.TrafficPolicyIdMarker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListTrafficPoliciesCommand = se_ListTrafficPoliciesCommand;
const se_ListTrafficPolicyInstancesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstances";
    const query = (0, smithy_client_1.map)({
        hostedzoneid: [, input.HostedZoneIdMarker],
        trafficpolicyinstancename: [, input.TrafficPolicyInstanceNameMarker],
        trafficpolicyinstancetype: [, input.TrafficPolicyInstanceTypeMarker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListTrafficPolicyInstancesCommand = se_ListTrafficPolicyInstancesCommand;
const se_ListTrafficPolicyInstancesByHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/trafficpolicyinstances/hostedzone";
    const query = (0, smithy_client_1.map)({
        id: [, (0, smithy_client_1.expectNonNull)(input.HostedZoneId, `HostedZoneId`)],
        trafficpolicyinstancename: [, input.TrafficPolicyInstanceNameMarker],
        trafficpolicyinstancetype: [, input.TrafficPolicyInstanceTypeMarker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListTrafficPolicyInstancesByHostedZoneCommand = se_ListTrafficPolicyInstancesByHostedZoneCommand;
const se_ListTrafficPolicyInstancesByPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/trafficpolicyinstances/trafficpolicy";
    const query = (0, smithy_client_1.map)({
        id: [, (0, smithy_client_1.expectNonNull)(input.TrafficPolicyId, `TrafficPolicyId`)],
        version: [
            (0, smithy_client_1.expectNonNull)(input.TrafficPolicyVersion, `TrafficPolicyVersion`) != null,
            () => input.TrafficPolicyVersion.toString(),
        ],
        hostedzoneid: [, input.HostedZoneIdMarker],
        trafficpolicyinstancename: [, input.TrafficPolicyInstanceNameMarker],
        trafficpolicyinstancetype: [, input.TrafficPolicyInstanceTypeMarker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListTrafficPolicyInstancesByPolicyCommand = se_ListTrafficPolicyInstancesByPolicyCommand;
const se_ListTrafficPolicyVersionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicies/{Id}/versions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    const query = (0, smithy_client_1.map)({
        trafficpolicyversion: [, input.TrafficPolicyVersionMarker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListTrafficPolicyVersionsCommand = se_ListTrafficPolicyVersionsCommand;
const se_ListVPCAssociationAuthorizationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    const query = (0, smithy_client_1.map)({
        nexttoken: [, input.NextToken],
        maxresults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListVPCAssociationAuthorizationsCommand = se_ListVPCAssociationAuthorizationsCommand;
const se_TestDNSAnswerCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/testdnsanswer";
    const query = (0, smithy_client_1.map)({
        hostedzoneid: [, (0, smithy_client_1.expectNonNull)(input.HostedZoneId, `HostedZoneId`)],
        recordname: [, (0, smithy_client_1.expectNonNull)(input.RecordName, `RecordName`)],
        recordtype: [, (0, smithy_client_1.expectNonNull)(input.RecordType, `RecordType`)],
        resolverip: [, input.ResolverIP],
        edns0clientsubnetip: [, input.EDNS0ClientSubnetIP],
        edns0clientsubnetmask: [, input.EDNS0ClientSubnetMask],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_TestDNSAnswerCommand = se_TestDNSAnswerCommand;
const se_UpdateHealthCheckCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheck/{HealthCheckId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("UpdateHealthCheckRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.AlarmIdentifier !== undefined) {
        const node = se_AlarmIdentifier(input.AlarmIdentifier, context).withName("AlarmIdentifier");
        bodyNode.addChildNode(node);
    }
    if (input.ChildHealthChecks !== undefined) {
        const nodes = se_ChildHealthCheckList(input.ChildHealthChecks, context);
        const containerNode = new xml_builder_1.XmlNode("ChildHealthChecks");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.Disabled !== undefined) {
        const node = xml_builder_1.XmlNode.of("Disabled", String(input.Disabled)).withName("Disabled");
        bodyNode.addChildNode(node);
    }
    if (input.EnableSNI !== undefined) {
        const node = xml_builder_1.XmlNode.of("EnableSNI", String(input.EnableSNI)).withName("EnableSNI");
        bodyNode.addChildNode(node);
    }
    if (input.FailureThreshold !== undefined) {
        const node = xml_builder_1.XmlNode.of("FailureThreshold", String(input.FailureThreshold)).withName("FailureThreshold");
        bodyNode.addChildNode(node);
    }
    if (input.FullyQualifiedDomainName !== undefined) {
        const node = xml_builder_1.XmlNode
            .of("FullyQualifiedDomainName", input.FullyQualifiedDomainName)
            .withName("FullyQualifiedDomainName");
        bodyNode.addChildNode(node);
    }
    if (input.HealthCheckVersion !== undefined) {
        const node = xml_builder_1.XmlNode.of("HealthCheckVersion", String(input.HealthCheckVersion)).withName("HealthCheckVersion");
        bodyNode.addChildNode(node);
    }
    if (input.HealthThreshold !== undefined) {
        const node = xml_builder_1.XmlNode.of("HealthThreshold", String(input.HealthThreshold)).withName("HealthThreshold");
        bodyNode.addChildNode(node);
    }
    if (input.IPAddress !== undefined) {
        const node = xml_builder_1.XmlNode.of("IPAddress", input.IPAddress).withName("IPAddress");
        bodyNode.addChildNode(node);
    }
    if (input.InsufficientDataHealthStatus !== undefined) {
        const node = xml_builder_1.XmlNode
            .of("InsufficientDataHealthStatus", input.InsufficientDataHealthStatus)
            .withName("InsufficientDataHealthStatus");
        bodyNode.addChildNode(node);
    }
    if (input.Inverted !== undefined) {
        const node = xml_builder_1.XmlNode.of("Inverted", String(input.Inverted)).withName("Inverted");
        bodyNode.addChildNode(node);
    }
    if (input.Port !== undefined) {
        const node = xml_builder_1.XmlNode.of("Port", String(input.Port)).withName("Port");
        bodyNode.addChildNode(node);
    }
    if (input.Regions !== undefined) {
        const nodes = se_HealthCheckRegionList(input.Regions, context);
        const containerNode = new xml_builder_1.XmlNode("Regions");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.ResetElements !== undefined) {
        const nodes = se_ResettableElementNameList(input.ResetElements, context);
        const containerNode = new xml_builder_1.XmlNode("ResetElements");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.ResourcePath !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourcePath", input.ResourcePath).withName("ResourcePath");
        bodyNode.addChildNode(node);
    }
    if (input.SearchString !== undefined) {
        const node = xml_builder_1.XmlNode.of("SearchString", input.SearchString).withName("SearchString");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_UpdateHealthCheckCommand = se_UpdateHealthCheckCommand;
const se_UpdateHostedZoneCommentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzone/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("UpdateHostedZoneCommentRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceDescription", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_UpdateHostedZoneCommentCommand = se_UpdateHostedZoneCommentCommand;
const se_UpdateTrafficPolicyCommentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicy/{Id}/{Version}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Version", () => input.Version.toString(), "{Version}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("UpdateTrafficPolicyCommentRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyComment", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_UpdateTrafficPolicyCommentCommand = se_UpdateTrafficPolicyCommentCommand;
const se_UpdateTrafficPolicyInstanceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstance/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("UpdateTrafficPolicyInstanceRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.TTL !== undefined) {
        const node = xml_builder_1.XmlNode.of("TTL", String(input.TTL)).withName("TTL");
        bodyNode.addChildNode(node);
    }
    if (input.TrafficPolicyId !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyId", input.TrafficPolicyId).withName("TrafficPolicyId");
        bodyNode.addChildNode(node);
    }
    if (input.TrafficPolicyVersion !== undefined) {
        const node = xml_builder_1.XmlNode
            .of("TrafficPolicyVersion", String(input.TrafficPolicyVersion))
            .withName("TrafficPolicyVersion");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_UpdateTrafficPolicyInstanceCommand = se_UpdateTrafficPolicyInstanceCommand;
const de_ActivateKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ActivateKeySigningKeyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.de_ActivateKeySigningKeyCommand = de_ActivateKeySigningKeyCommand;
const de_ActivateKeySigningKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidKMSArn":
        case "com.amazonaws.route53#InvalidKMSArn":
            throw await de_InvalidKMSArnRes(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await de_InvalidKeySigningKeyStatusRes(parsedOutput, context);
        case "InvalidSigningStatus":
        case "com.amazonaws.route53#InvalidSigningStatus":
            throw await de_InvalidSigningStatusRes(parsedOutput, context);
        case "NoSuchKeySigningKey":
        case "com.amazonaws.route53#NoSuchKeySigningKey":
            throw await de_NoSuchKeySigningKeyRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_AssociateVPCWithHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_AssociateVPCWithHostedZoneCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.de_AssociateVPCWithHostedZoneCommand = de_AssociateVPCWithHostedZoneCommand;
const de_AssociateVPCWithHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictingDomainExists":
        case "com.amazonaws.route53#ConflictingDomainExists":
            throw await de_ConflictingDomainExistsRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidVPCId":
        case "com.amazonaws.route53#InvalidVPCId":
            throw await de_InvalidVPCIdRes(parsedOutput, context);
        case "LimitsExceeded":
        case "com.amazonaws.route53#LimitsExceeded":
            throw await de_LimitsExceededRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.route53#NotAuthorizedException":
            throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await de_PriorRequestNotCompleteRes(parsedOutput, context);
        case "PublicZoneVPCAssociation":
        case "com.amazonaws.route53#PublicZoneVPCAssociation":
            throw await de_PublicZoneVPCAssociationRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ChangeCidrCollectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ChangeCidrCollectionCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(data["Id"]);
    }
    return contents;
};
exports.de_ChangeCidrCollectionCommand = de_ChangeCidrCollectionCommand;
const de_ChangeCidrCollectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CidrBlockInUseException":
        case "com.amazonaws.route53#CidrBlockInUseException":
            throw await de_CidrBlockInUseExceptionRes(parsedOutput, context);
        case "CidrCollectionVersionMismatchException":
        case "com.amazonaws.route53#CidrCollectionVersionMismatchException":
            throw await de_CidrCollectionVersionMismatchExceptionRes(parsedOutput, context);
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "LimitsExceeded":
        case "com.amazonaws.route53#LimitsExceeded":
            throw await de_LimitsExceededRes(parsedOutput, context);
        case "NoSuchCidrCollectionException":
        case "com.amazonaws.route53#NoSuchCidrCollectionException":
            throw await de_NoSuchCidrCollectionExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ChangeResourceRecordSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ChangeResourceRecordSetsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.de_ChangeResourceRecordSetsCommand = de_ChangeResourceRecordSetsCommand;
const de_ChangeResourceRecordSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidChangeBatch":
        case "com.amazonaws.route53#InvalidChangeBatch":
            throw await de_InvalidChangeBatchRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await de_NoSuchHealthCheckRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await de_PriorRequestNotCompleteRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ChangeTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ChangeTagsForResourceCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_ChangeTagsForResourceCommand = de_ChangeTagsForResourceCommand;
const de_ChangeTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await de_NoSuchHealthCheckRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await de_PriorRequestNotCompleteRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.route53#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateCidrCollectionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateCidrCollectionCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Collection"] !== undefined) {
        contents.Collection = de_CidrCollection(data["Collection"], context);
    }
    return contents;
};
exports.de_CreateCidrCollectionCommand = de_CreateCidrCollectionCommand;
const de_CreateCidrCollectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CidrCollectionAlreadyExistsException":
        case "com.amazonaws.route53#CidrCollectionAlreadyExistsException":
            throw await de_CidrCollectionAlreadyExistsExceptionRes(parsedOutput, context);
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "LimitsExceeded":
        case "com.amazonaws.route53#LimitsExceeded":
            throw await de_LimitsExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateHealthCheckCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HealthCheck"] !== undefined) {
        contents.HealthCheck = de_HealthCheck(data["HealthCheck"], context);
    }
    return contents;
};
exports.de_CreateHealthCheckCommand = de_CreateHealthCheckCommand;
const de_CreateHealthCheckCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HealthCheckAlreadyExists":
        case "com.amazonaws.route53#HealthCheckAlreadyExists":
            throw await de_HealthCheckAlreadyExistsRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "TooManyHealthChecks":
        case "com.amazonaws.route53#TooManyHealthChecks":
            throw await de_TooManyHealthChecksRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateHostedZoneCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    if (data["DelegationSet"] !== undefined) {
        contents.DelegationSet = de_DelegationSet(data["DelegationSet"], context);
    }
    if (data["HostedZone"] !== undefined) {
        contents.HostedZone = de_HostedZone(data["HostedZone"], context);
    }
    if (data["VPC"] !== undefined) {
        contents.VPC = de_VPC(data["VPC"], context);
    }
    return contents;
};
exports.de_CreateHostedZoneCommand = de_CreateHostedZoneCommand;
const de_CreateHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictingDomainExists":
        case "com.amazonaws.route53#ConflictingDomainExists":
            throw await de_ConflictingDomainExistsRes(parsedOutput, context);
        case "DelegationSetNotAvailable":
        case "com.amazonaws.route53#DelegationSetNotAvailable":
            throw await de_DelegationSetNotAvailableRes(parsedOutput, context);
        case "DelegationSetNotReusable":
        case "com.amazonaws.route53#DelegationSetNotReusable":
            throw await de_DelegationSetNotReusableRes(parsedOutput, context);
        case "HostedZoneAlreadyExists":
        case "com.amazonaws.route53#HostedZoneAlreadyExists":
            throw await de_HostedZoneAlreadyExistsRes(parsedOutput, context);
        case "InvalidDomainName":
        case "com.amazonaws.route53#InvalidDomainName":
            throw await de_InvalidDomainNameRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidVPCId":
        case "com.amazonaws.route53#InvalidVPCId":
            throw await de_InvalidVPCIdRes(parsedOutput, context);
        case "NoSuchDelegationSet":
        case "com.amazonaws.route53#NoSuchDelegationSet":
            throw await de_NoSuchDelegationSetRes(parsedOutput, context);
        case "TooManyHostedZones":
        case "com.amazonaws.route53#TooManyHostedZones":
            throw await de_TooManyHostedZonesRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateKeySigningKeyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    if (data["KeySigningKey"] !== undefined) {
        contents.KeySigningKey = de_KeySigningKey(data["KeySigningKey"], context);
    }
    return contents;
};
exports.de_CreateKeySigningKeyCommand = de_CreateKeySigningKeyCommand;
const de_CreateKeySigningKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidArgument":
        case "com.amazonaws.route53#InvalidArgument":
            throw await de_InvalidArgumentRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidKMSArn":
        case "com.amazonaws.route53#InvalidKMSArn":
            throw await de_InvalidKMSArnRes(parsedOutput, context);
        case "InvalidKeySigningKeyName":
        case "com.amazonaws.route53#InvalidKeySigningKeyName":
            throw await de_InvalidKeySigningKeyNameRes(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await de_InvalidKeySigningKeyStatusRes(parsedOutput, context);
        case "InvalidSigningStatus":
        case "com.amazonaws.route53#InvalidSigningStatus":
            throw await de_InvalidSigningStatusRes(parsedOutput, context);
        case "KeySigningKeyAlreadyExists":
        case "com.amazonaws.route53#KeySigningKeyAlreadyExists":
            throw await de_KeySigningKeyAlreadyExistsRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "TooManyKeySigningKeys":
        case "com.amazonaws.route53#TooManyKeySigningKeys":
            throw await de_TooManyKeySigningKeysRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateQueryLoggingConfigCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateQueryLoggingConfigCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["QueryLoggingConfig"] !== undefined) {
        contents.QueryLoggingConfig = de_QueryLoggingConfig(data["QueryLoggingConfig"], context);
    }
    return contents;
};
exports.de_CreateQueryLoggingConfigCommand = de_CreateQueryLoggingConfigCommand;
const de_CreateQueryLoggingConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InsufficientCloudWatchLogsResourcePolicy":
        case "com.amazonaws.route53#InsufficientCloudWatchLogsResourcePolicy":
            throw await de_InsufficientCloudWatchLogsResourcePolicyRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchCloudWatchLogsLogGroup":
        case "com.amazonaws.route53#NoSuchCloudWatchLogsLogGroup":
            throw await de_NoSuchCloudWatchLogsLogGroupRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "QueryLoggingConfigAlreadyExists":
        case "com.amazonaws.route53#QueryLoggingConfigAlreadyExists":
            throw await de_QueryLoggingConfigAlreadyExistsRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateReusableDelegationSetCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateReusableDelegationSetCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["DelegationSet"] !== undefined) {
        contents.DelegationSet = de_DelegationSet(data["DelegationSet"], context);
    }
    return contents;
};
exports.de_CreateReusableDelegationSetCommand = de_CreateReusableDelegationSetCommand;
const de_CreateReusableDelegationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DelegationSetAlreadyCreated":
        case "com.amazonaws.route53#DelegationSetAlreadyCreated":
            throw await de_DelegationSetAlreadyCreatedRes(parsedOutput, context);
        case "DelegationSetAlreadyReusable":
        case "com.amazonaws.route53#DelegationSetAlreadyReusable":
            throw await de_DelegationSetAlreadyReusableRes(parsedOutput, context);
        case "DelegationSetNotAvailable":
        case "com.amazonaws.route53#DelegationSetNotAvailable":
            throw await de_DelegationSetNotAvailableRes(parsedOutput, context);
        case "HostedZoneNotFound":
        case "com.amazonaws.route53#HostedZoneNotFound":
            throw await de_HostedZoneNotFoundRes(parsedOutput, context);
        case "InvalidArgument":
        case "com.amazonaws.route53#InvalidArgument":
            throw await de_InvalidArgumentRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "LimitsExceeded":
        case "com.amazonaws.route53#LimitsExceeded":
            throw await de_LimitsExceededRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateTrafficPolicyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateTrafficPolicyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicy"] !== undefined) {
        contents.TrafficPolicy = de_TrafficPolicy(data["TrafficPolicy"], context);
    }
    return contents;
};
exports.de_CreateTrafficPolicyCommand = de_CreateTrafficPolicyCommand;
const de_CreateTrafficPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidTrafficPolicyDocument":
        case "com.amazonaws.route53#InvalidTrafficPolicyDocument":
            throw await de_InvalidTrafficPolicyDocumentRes(parsedOutput, context);
        case "TooManyTrafficPolicies":
        case "com.amazonaws.route53#TooManyTrafficPolicies":
            throw await de_TooManyTrafficPoliciesRes(parsedOutput, context);
        case "TrafficPolicyAlreadyExists":
        case "com.amazonaws.route53#TrafficPolicyAlreadyExists":
            throw await de_TrafficPolicyAlreadyExistsRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateTrafficPolicyInstanceCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstance = de_TrafficPolicyInstance(data["TrafficPolicyInstance"], context);
    }
    return contents;
};
exports.de_CreateTrafficPolicyInstanceCommand = de_CreateTrafficPolicyInstanceCommand;
const de_CreateTrafficPolicyInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await de_NoSuchTrafficPolicyRes(parsedOutput, context);
        case "TooManyTrafficPolicyInstances":
        case "com.amazonaws.route53#TooManyTrafficPolicyInstances":
            throw await de_TooManyTrafficPolicyInstancesRes(parsedOutput, context);
        case "TrafficPolicyInstanceAlreadyExists":
        case "com.amazonaws.route53#TrafficPolicyInstanceAlreadyExists":
            throw await de_TrafficPolicyInstanceAlreadyExistsRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateTrafficPolicyVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateTrafficPolicyVersionCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicy"] !== undefined) {
        contents.TrafficPolicy = de_TrafficPolicy(data["TrafficPolicy"], context);
    }
    return contents;
};
exports.de_CreateTrafficPolicyVersionCommand = de_CreateTrafficPolicyVersionCommand;
const de_CreateTrafficPolicyVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidTrafficPolicyDocument":
        case "com.amazonaws.route53#InvalidTrafficPolicyDocument":
            throw await de_InvalidTrafficPolicyDocumentRes(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await de_NoSuchTrafficPolicyRes(parsedOutput, context);
        case "TooManyTrafficPolicyVersionsForCurrentPolicy":
        case "com.amazonaws.route53#TooManyTrafficPolicyVersionsForCurrentPolicy":
            throw await de_TooManyTrafficPolicyVersionsForCurrentPolicyRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CreateVPCAssociationAuthorizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateVPCAssociationAuthorizationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(data["HostedZoneId"]);
    }
    if (data["VPC"] !== undefined) {
        contents.VPC = de_VPC(data["VPC"], context);
    }
    return contents;
};
exports.de_CreateVPCAssociationAuthorizationCommand = de_CreateVPCAssociationAuthorizationCommand;
const de_CreateVPCAssociationAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidVPCId":
        case "com.amazonaws.route53#InvalidVPCId":
            throw await de_InvalidVPCIdRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "TooManyVPCAssociationAuthorizations":
        case "com.amazonaws.route53#TooManyVPCAssociationAuthorizations":
            throw await de_TooManyVPCAssociationAuthorizationsRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeactivateKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeactivateKeySigningKeyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.de_DeactivateKeySigningKeyCommand = de_DeactivateKeySigningKeyCommand;
const de_DeactivateKeySigningKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await de_InvalidKeySigningKeyStatusRes(parsedOutput, context);
        case "InvalidSigningStatus":
        case "com.amazonaws.route53#InvalidSigningStatus":
            throw await de_InvalidSigningStatusRes(parsedOutput, context);
        case "KeySigningKeyInParentDSRecord":
        case "com.amazonaws.route53#KeySigningKeyInParentDSRecord":
            throw await de_KeySigningKeyInParentDSRecordRes(parsedOutput, context);
        case "KeySigningKeyInUse":
        case "com.amazonaws.route53#KeySigningKeyInUse":
            throw await de_KeySigningKeyInUseRes(parsedOutput, context);
        case "NoSuchKeySigningKey":
        case "com.amazonaws.route53#NoSuchKeySigningKey":
            throw await de_NoSuchKeySigningKeyRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteCidrCollectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteCidrCollectionCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteCidrCollectionCommand = de_DeleteCidrCollectionCommand;
const de_DeleteCidrCollectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CidrCollectionInUseException":
        case "com.amazonaws.route53#CidrCollectionInUseException":
            throw await de_CidrCollectionInUseExceptionRes(parsedOutput, context);
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchCidrCollectionException":
        case "com.amazonaws.route53#NoSuchCidrCollectionException":
            throw await de_NoSuchCidrCollectionExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteHealthCheckCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteHealthCheckCommand = de_DeleteHealthCheckCommand;
const de_DeleteHealthCheckCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HealthCheckInUse":
        case "com.amazonaws.route53#HealthCheckInUse":
            throw await de_HealthCheckInUseRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await de_NoSuchHealthCheckRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteHostedZoneCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.de_DeleteHostedZoneCommand = de_DeleteHostedZoneCommand;
const de_DeleteHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HostedZoneNotEmpty":
        case "com.amazonaws.route53#HostedZoneNotEmpty":
            throw await de_HostedZoneNotEmptyRes(parsedOutput, context);
        case "InvalidDomainName":
        case "com.amazonaws.route53#InvalidDomainName":
            throw await de_InvalidDomainNameRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await de_PriorRequestNotCompleteRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteKeySigningKeyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.de_DeleteKeySigningKeyCommand = de_DeleteKeySigningKeyCommand;
const de_DeleteKeySigningKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidKMSArn":
        case "com.amazonaws.route53#InvalidKMSArn":
            throw await de_InvalidKMSArnRes(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await de_InvalidKeySigningKeyStatusRes(parsedOutput, context);
        case "InvalidSigningStatus":
        case "com.amazonaws.route53#InvalidSigningStatus":
            throw await de_InvalidSigningStatusRes(parsedOutput, context);
        case "NoSuchKeySigningKey":
        case "com.amazonaws.route53#NoSuchKeySigningKey":
            throw await de_NoSuchKeySigningKeyRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteQueryLoggingConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteQueryLoggingConfigCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteQueryLoggingConfigCommand = de_DeleteQueryLoggingConfigCommand;
const de_DeleteQueryLoggingConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchQueryLoggingConfig":
        case "com.amazonaws.route53#NoSuchQueryLoggingConfig":
            throw await de_NoSuchQueryLoggingConfigRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteReusableDelegationSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteReusableDelegationSetCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteReusableDelegationSetCommand = de_DeleteReusableDelegationSetCommand;
const de_DeleteReusableDelegationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DelegationSetInUse":
        case "com.amazonaws.route53#DelegationSetInUse":
            throw await de_DelegationSetInUseRes(parsedOutput, context);
        case "DelegationSetNotReusable":
        case "com.amazonaws.route53#DelegationSetNotReusable":
            throw await de_DelegationSetNotReusableRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchDelegationSet":
        case "com.amazonaws.route53#NoSuchDelegationSet":
            throw await de_NoSuchDelegationSetRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteTrafficPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteTrafficPolicyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteTrafficPolicyCommand = de_DeleteTrafficPolicyCommand;
const de_DeleteTrafficPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await de_NoSuchTrafficPolicyRes(parsedOutput, context);
        case "TrafficPolicyInUse":
        case "com.amazonaws.route53#TrafficPolicyInUse":
            throw await de_TrafficPolicyInUseRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteTrafficPolicyInstanceCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteTrafficPolicyInstanceCommand = de_DeleteTrafficPolicyInstanceCommand;
const de_DeleteTrafficPolicyInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await de_NoSuchTrafficPolicyInstanceRes(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await de_PriorRequestNotCompleteRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DeleteVPCAssociationAuthorizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteVPCAssociationAuthorizationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteVPCAssociationAuthorizationCommand = de_DeleteVPCAssociationAuthorizationCommand;
const de_DeleteVPCAssociationAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidVPCId":
        case "com.amazonaws.route53#InvalidVPCId":
            throw await de_InvalidVPCIdRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "VPCAssociationAuthorizationNotFound":
        case "com.amazonaws.route53#VPCAssociationAuthorizationNotFound":
            throw await de_VPCAssociationAuthorizationNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DisableHostedZoneDNSSECCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisableHostedZoneDNSSECCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.de_DisableHostedZoneDNSSECCommand = de_DisableHostedZoneDNSSECCommand;
const de_DisableHostedZoneDNSSECCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "DNSSECNotFound":
        case "com.amazonaws.route53#DNSSECNotFound":
            throw await de_DNSSECNotFoundRes(parsedOutput, context);
        case "InvalidArgument":
        case "com.amazonaws.route53#InvalidArgument":
            throw await de_InvalidArgumentRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidKMSArn":
        case "com.amazonaws.route53#InvalidKMSArn":
            throw await de_InvalidKMSArnRes(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await de_InvalidKeySigningKeyStatusRes(parsedOutput, context);
        case "KeySigningKeyInParentDSRecord":
        case "com.amazonaws.route53#KeySigningKeyInParentDSRecord":
            throw await de_KeySigningKeyInParentDSRecordRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_DisassociateVPCFromHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisassociateVPCFromHostedZoneCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.de_DisassociateVPCFromHostedZoneCommand = de_DisassociateVPCFromHostedZoneCommand;
const de_DisassociateVPCFromHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidVPCId":
        case "com.amazonaws.route53#InvalidVPCId":
            throw await de_InvalidVPCIdRes(parsedOutput, context);
        case "LastVPCAssociation":
        case "com.amazonaws.route53#LastVPCAssociation":
            throw await de_LastVPCAssociationRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "VPCAssociationNotFound":
        case "com.amazonaws.route53#VPCAssociationNotFound":
            throw await de_VPCAssociationNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_EnableHostedZoneDNSSECCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_EnableHostedZoneDNSSECCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.de_EnableHostedZoneDNSSECCommand = de_EnableHostedZoneDNSSECCommand;
const de_EnableHostedZoneDNSSECCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "DNSSECNotFound":
        case "com.amazonaws.route53#DNSSECNotFound":
            throw await de_DNSSECNotFoundRes(parsedOutput, context);
        case "HostedZonePartiallyDelegated":
        case "com.amazonaws.route53#HostedZonePartiallyDelegated":
            throw await de_HostedZonePartiallyDelegatedRes(parsedOutput, context);
        case "InvalidArgument":
        case "com.amazonaws.route53#InvalidArgument":
            throw await de_InvalidArgumentRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidKMSArn":
        case "com.amazonaws.route53#InvalidKMSArn":
            throw await de_InvalidKMSArnRes(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await de_InvalidKeySigningKeyStatusRes(parsedOutput, context);
        case "KeySigningKeyWithActiveStatusNotFound":
        case "com.amazonaws.route53#KeySigningKeyWithActiveStatusNotFound":
            throw await de_KeySigningKeyWithActiveStatusNotFoundRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetAccountLimitCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetAccountLimitCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseLong)(data["Count"]);
    }
    if (data["Limit"] !== undefined) {
        contents.Limit = de_AccountLimit(data["Limit"], context);
    }
    return contents;
};
exports.de_GetAccountLimitCommand = de_GetAccountLimitCommand;
const de_GetAccountLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetChangeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetChangeCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = de_ChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.de_GetChangeCommand = de_GetChangeCommand;
const de_GetChangeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchChange":
        case "com.amazonaws.route53#NoSuchChange":
            throw await de_NoSuchChangeRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetCheckerIpRangesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetCheckerIpRangesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CheckerIpRanges === "") {
        contents.CheckerIpRanges = [];
    }
    else if (data["CheckerIpRanges"] !== undefined && data["CheckerIpRanges"]["member"] !== undefined) {
        contents.CheckerIpRanges = de_CheckerIpRanges((0, smithy_client_1.getArrayIfSingleItem)(data["CheckerIpRanges"]["member"]), context);
    }
    return contents;
};
exports.de_GetCheckerIpRangesCommand = de_GetCheckerIpRangesCommand;
const de_GetCheckerIpRangesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_GetDNSSECCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetDNSSECCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.KeySigningKeys === "") {
        contents.KeySigningKeys = [];
    }
    else if (data["KeySigningKeys"] !== undefined && data["KeySigningKeys"]["member"] !== undefined) {
        contents.KeySigningKeys = de_KeySigningKeys((0, smithy_client_1.getArrayIfSingleItem)(data["KeySigningKeys"]["member"]), context);
    }
    if (data["Status"] !== undefined) {
        contents.Status = de_DNSSECStatus(data["Status"], context);
    }
    return contents;
};
exports.de_GetDNSSECCommand = de_GetDNSSECCommand;
const de_GetDNSSECCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgument":
        case "com.amazonaws.route53#InvalidArgument":
            throw await de_InvalidArgumentRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetGeoLocationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetGeoLocationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["GeoLocationDetails"] !== undefined) {
        contents.GeoLocationDetails = de_GeoLocationDetails(data["GeoLocationDetails"], context);
    }
    return contents;
};
exports.de_GetGeoLocationCommand = de_GetGeoLocationCommand;
const de_GetGeoLocationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchGeoLocation":
        case "com.amazonaws.route53#NoSuchGeoLocation":
            throw await de_NoSuchGeoLocationRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetHealthCheckCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HealthCheck"] !== undefined) {
        contents.HealthCheck = de_HealthCheck(data["HealthCheck"], context);
    }
    return contents;
};
exports.de_GetHealthCheckCommand = de_GetHealthCheckCommand;
const de_GetHealthCheckCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "IncompatibleVersion":
        case "com.amazonaws.route53#IncompatibleVersion":
            throw await de_IncompatibleVersionRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await de_NoSuchHealthCheckRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetHealthCheckCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetHealthCheckCountCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HealthCheckCount"] !== undefined) {
        contents.HealthCheckCount = (0, smithy_client_1.strictParseLong)(data["HealthCheckCount"]);
    }
    return contents;
};
exports.de_GetHealthCheckCountCommand = de_GetHealthCheckCountCommand;
const de_GetHealthCheckCountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_GetHealthCheckLastFailureReasonCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetHealthCheckLastFailureReasonCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.HealthCheckObservations === "") {
        contents.HealthCheckObservations = [];
    }
    else if (data["HealthCheckObservations"] !== undefined &&
        data["HealthCheckObservations"]["HealthCheckObservation"] !== undefined) {
        contents.HealthCheckObservations = de_HealthCheckObservations((0, smithy_client_1.getArrayIfSingleItem)(data["HealthCheckObservations"]["HealthCheckObservation"]), context);
    }
    return contents;
};
exports.de_GetHealthCheckLastFailureReasonCommand = de_GetHealthCheckLastFailureReasonCommand;
const de_GetHealthCheckLastFailureReasonCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await de_NoSuchHealthCheckRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetHealthCheckStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetHealthCheckStatusCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.HealthCheckObservations === "") {
        contents.HealthCheckObservations = [];
    }
    else if (data["HealthCheckObservations"] !== undefined &&
        data["HealthCheckObservations"]["HealthCheckObservation"] !== undefined) {
        contents.HealthCheckObservations = de_HealthCheckObservations((0, smithy_client_1.getArrayIfSingleItem)(data["HealthCheckObservations"]["HealthCheckObservation"]), context);
    }
    return contents;
};
exports.de_GetHealthCheckStatusCommand = de_GetHealthCheckStatusCommand;
const de_GetHealthCheckStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await de_NoSuchHealthCheckRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetHostedZoneCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["DelegationSet"] !== undefined) {
        contents.DelegationSet = de_DelegationSet(data["DelegationSet"], context);
    }
    if (data["HostedZone"] !== undefined) {
        contents.HostedZone = de_HostedZone(data["HostedZone"], context);
    }
    if (data.VPCs === "") {
        contents.VPCs = [];
    }
    else if (data["VPCs"] !== undefined && data["VPCs"]["VPC"] !== undefined) {
        contents.VPCs = de_VPCs((0, smithy_client_1.getArrayIfSingleItem)(data["VPCs"]["VPC"]), context);
    }
    return contents;
};
exports.de_GetHostedZoneCommand = de_GetHostedZoneCommand;
const de_GetHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetHostedZoneCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetHostedZoneCountCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZoneCount"] !== undefined) {
        contents.HostedZoneCount = (0, smithy_client_1.strictParseLong)(data["HostedZoneCount"]);
    }
    return contents;
};
exports.de_GetHostedZoneCountCommand = de_GetHostedZoneCountCommand;
const de_GetHostedZoneCountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetHostedZoneLimitCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetHostedZoneLimitCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseLong)(data["Count"]);
    }
    if (data["Limit"] !== undefined) {
        contents.Limit = de_HostedZoneLimit(data["Limit"], context);
    }
    return contents;
};
exports.de_GetHostedZoneLimitCommand = de_GetHostedZoneLimitCommand;
const de_GetHostedZoneLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HostedZoneNotPrivate":
        case "com.amazonaws.route53#HostedZoneNotPrivate":
            throw await de_HostedZoneNotPrivateRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetQueryLoggingConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetQueryLoggingConfigCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["QueryLoggingConfig"] !== undefined) {
        contents.QueryLoggingConfig = de_QueryLoggingConfig(data["QueryLoggingConfig"], context);
    }
    return contents;
};
exports.de_GetQueryLoggingConfigCommand = de_GetQueryLoggingConfigCommand;
const de_GetQueryLoggingConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchQueryLoggingConfig":
        case "com.amazonaws.route53#NoSuchQueryLoggingConfig":
            throw await de_NoSuchQueryLoggingConfigRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetReusableDelegationSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetReusableDelegationSetCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["DelegationSet"] !== undefined) {
        contents.DelegationSet = de_DelegationSet(data["DelegationSet"], context);
    }
    return contents;
};
exports.de_GetReusableDelegationSetCommand = de_GetReusableDelegationSetCommand;
const de_GetReusableDelegationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DelegationSetNotReusable":
        case "com.amazonaws.route53#DelegationSetNotReusable":
            throw await de_DelegationSetNotReusableRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchDelegationSet":
        case "com.amazonaws.route53#NoSuchDelegationSet":
            throw await de_NoSuchDelegationSetRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetReusableDelegationSetLimitCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetReusableDelegationSetLimitCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseLong)(data["Count"]);
    }
    if (data["Limit"] !== undefined) {
        contents.Limit = de_ReusableDelegationSetLimit(data["Limit"], context);
    }
    return contents;
};
exports.de_GetReusableDelegationSetLimitCommand = de_GetReusableDelegationSetLimitCommand;
const de_GetReusableDelegationSetLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchDelegationSet":
        case "com.amazonaws.route53#NoSuchDelegationSet":
            throw await de_NoSuchDelegationSetRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetTrafficPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetTrafficPolicyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicy"] !== undefined) {
        contents.TrafficPolicy = de_TrafficPolicy(data["TrafficPolicy"], context);
    }
    return contents;
};
exports.de_GetTrafficPolicyCommand = de_GetTrafficPolicyCommand;
const de_GetTrafficPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await de_NoSuchTrafficPolicyRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetTrafficPolicyInstanceCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstance = de_TrafficPolicyInstance(data["TrafficPolicyInstance"], context);
    }
    return contents;
};
exports.de_GetTrafficPolicyInstanceCommand = de_GetTrafficPolicyInstanceCommand;
const de_GetTrafficPolicyInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await de_NoSuchTrafficPolicyInstanceRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_GetTrafficPolicyInstanceCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetTrafficPolicyInstanceCountCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicyInstanceCount"] !== undefined) {
        contents.TrafficPolicyInstanceCount = (0, smithy_client_1.strictParseInt32)(data["TrafficPolicyInstanceCount"]);
    }
    return contents;
};
exports.de_GetTrafficPolicyInstanceCountCommand = de_GetTrafficPolicyInstanceCountCommand;
const de_GetTrafficPolicyInstanceCountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
const de_ListCidrBlocksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListCidrBlocksCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CidrBlocks === "") {
        contents.CidrBlocks = [];
    }
    else if (data["CidrBlocks"] !== undefined && data["CidrBlocks"]["member"] !== undefined) {
        contents.CidrBlocks = de_CidrBlockSummaries((0, smithy_client_1.getArrayIfSingleItem)(data["CidrBlocks"]["member"]), context);
    }
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    return contents;
};
exports.de_ListCidrBlocksCommand = de_ListCidrBlocksCommand;
const de_ListCidrBlocksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchCidrCollectionException":
        case "com.amazonaws.route53#NoSuchCidrCollectionException":
            throw await de_NoSuchCidrCollectionExceptionRes(parsedOutput, context);
        case "NoSuchCidrLocationException":
        case "com.amazonaws.route53#NoSuchCidrLocationException":
            throw await de_NoSuchCidrLocationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListCidrCollectionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListCidrCollectionsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CidrCollections === "") {
        contents.CidrCollections = [];
    }
    else if (data["CidrCollections"] !== undefined && data["CidrCollections"]["member"] !== undefined) {
        contents.CidrCollections = de_CollectionSummaries((0, smithy_client_1.getArrayIfSingleItem)(data["CidrCollections"]["member"]), context);
    }
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    return contents;
};
exports.de_ListCidrCollectionsCommand = de_ListCidrCollectionsCommand;
const de_ListCidrCollectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListCidrLocationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListCidrLocationsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CidrLocations === "") {
        contents.CidrLocations = [];
    }
    else if (data["CidrLocations"] !== undefined && data["CidrLocations"]["member"] !== undefined) {
        contents.CidrLocations = de_LocationSummaries((0, smithy_client_1.getArrayIfSingleItem)(data["CidrLocations"]["member"]), context);
    }
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    return contents;
};
exports.de_ListCidrLocationsCommand = de_ListCidrLocationsCommand;
const de_ListCidrLocationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchCidrCollectionException":
        case "com.amazonaws.route53#NoSuchCidrCollectionException":
            throw await de_NoSuchCidrCollectionExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListGeoLocationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListGeoLocationsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.GeoLocationDetailsList === "") {
        contents.GeoLocationDetailsList = [];
    }
    else if (data["GeoLocationDetailsList"] !== undefined &&
        data["GeoLocationDetailsList"]["GeoLocationDetails"] !== undefined) {
        contents.GeoLocationDetailsList = de_GeoLocationDetailsList((0, smithy_client_1.getArrayIfSingleItem)(data["GeoLocationDetailsList"]["GeoLocationDetails"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextContinentCode"] !== undefined) {
        contents.NextContinentCode = (0, smithy_client_1.expectString)(data["NextContinentCode"]);
    }
    if (data["NextCountryCode"] !== undefined) {
        contents.NextCountryCode = (0, smithy_client_1.expectString)(data["NextCountryCode"]);
    }
    if (data["NextSubdivisionCode"] !== undefined) {
        contents.NextSubdivisionCode = (0, smithy_client_1.expectString)(data["NextSubdivisionCode"]);
    }
    return contents;
};
exports.de_ListGeoLocationsCommand = de_ListGeoLocationsCommand;
const de_ListGeoLocationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListHealthChecksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListHealthChecksCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.HealthChecks === "") {
        contents.HealthChecks = [];
    }
    else if (data["HealthChecks"] !== undefined && data["HealthChecks"]["HealthCheck"] !== undefined) {
        contents.HealthChecks = de_HealthChecks((0, smithy_client_1.getArrayIfSingleItem)(data["HealthChecks"]["HealthCheck"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(data["Marker"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextMarker"] !== undefined) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data["NextMarker"]);
    }
    return contents;
};
exports.de_ListHealthChecksCommand = de_ListHealthChecksCommand;
const de_ListHealthChecksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "IncompatibleVersion":
        case "com.amazonaws.route53#IncompatibleVersion":
            throw await de_IncompatibleVersionRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListHostedZonesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListHostedZonesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.HostedZones === "") {
        contents.HostedZones = [];
    }
    else if (data["HostedZones"] !== undefined && data["HostedZones"]["HostedZone"] !== undefined) {
        contents.HostedZones = de_HostedZones((0, smithy_client_1.getArrayIfSingleItem)(data["HostedZones"]["HostedZone"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(data["Marker"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextMarker"] !== undefined) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data["NextMarker"]);
    }
    return contents;
};
exports.de_ListHostedZonesCommand = de_ListHostedZonesCommand;
const de_ListHostedZonesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DelegationSetNotReusable":
        case "com.amazonaws.route53#DelegationSetNotReusable":
            throw await de_DelegationSetNotReusableRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchDelegationSet":
        case "com.amazonaws.route53#NoSuchDelegationSet":
            throw await de_NoSuchDelegationSetRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListHostedZonesByNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListHostedZonesByNameCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["DNSName"] !== undefined) {
        contents.DNSName = (0, smithy_client_1.expectString)(data["DNSName"]);
    }
    if (data["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(data["HostedZoneId"]);
    }
    if (data.HostedZones === "") {
        contents.HostedZones = [];
    }
    else if (data["HostedZones"] !== undefined && data["HostedZones"]["HostedZone"] !== undefined) {
        contents.HostedZones = de_HostedZones((0, smithy_client_1.getArrayIfSingleItem)(data["HostedZones"]["HostedZone"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextDNSName"] !== undefined) {
        contents.NextDNSName = (0, smithy_client_1.expectString)(data["NextDNSName"]);
    }
    if (data["NextHostedZoneId"] !== undefined) {
        contents.NextHostedZoneId = (0, smithy_client_1.expectString)(data["NextHostedZoneId"]);
    }
    return contents;
};
exports.de_ListHostedZonesByNameCommand = de_ListHostedZonesByNameCommand;
const de_ListHostedZonesByNameCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidDomainName":
        case "com.amazonaws.route53#InvalidDomainName":
            throw await de_InvalidDomainNameRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListHostedZonesByVPCCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListHostedZonesByVPCCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.HostedZoneSummaries === "") {
        contents.HostedZoneSummaries = [];
    }
    else if (data["HostedZoneSummaries"] !== undefined &&
        data["HostedZoneSummaries"]["HostedZoneSummary"] !== undefined) {
        contents.HostedZoneSummaries = de_HostedZoneSummaries((0, smithy_client_1.getArrayIfSingleItem)(data["HostedZoneSummaries"]["HostedZoneSummary"]), context);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    return contents;
};
exports.de_ListHostedZonesByVPCCommand = de_ListHostedZonesByVPCCommand;
const de_ListHostedZonesByVPCCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidPaginationToken":
        case "com.amazonaws.route53#InvalidPaginationToken":
            throw await de_InvalidPaginationTokenRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListQueryLoggingConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListQueryLoggingConfigsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    if (data.QueryLoggingConfigs === "") {
        contents.QueryLoggingConfigs = [];
    }
    else if (data["QueryLoggingConfigs"] !== undefined &&
        data["QueryLoggingConfigs"]["QueryLoggingConfig"] !== undefined) {
        contents.QueryLoggingConfigs = de_QueryLoggingConfigs((0, smithy_client_1.getArrayIfSingleItem)(data["QueryLoggingConfigs"]["QueryLoggingConfig"]), context);
    }
    return contents;
};
exports.de_ListQueryLoggingConfigsCommand = de_ListQueryLoggingConfigsCommand;
const de_ListQueryLoggingConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidPaginationToken":
        case "com.amazonaws.route53#InvalidPaginationToken":
            throw await de_InvalidPaginationTokenRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListResourceRecordSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListResourceRecordSetsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextRecordIdentifier"] !== undefined) {
        contents.NextRecordIdentifier = (0, smithy_client_1.expectString)(data["NextRecordIdentifier"]);
    }
    if (data["NextRecordName"] !== undefined) {
        contents.NextRecordName = (0, smithy_client_1.expectString)(data["NextRecordName"]);
    }
    if (data["NextRecordType"] !== undefined) {
        contents.NextRecordType = (0, smithy_client_1.expectString)(data["NextRecordType"]);
    }
    if (data.ResourceRecordSets === "") {
        contents.ResourceRecordSets = [];
    }
    else if (data["ResourceRecordSets"] !== undefined &&
        data["ResourceRecordSets"]["ResourceRecordSet"] !== undefined) {
        contents.ResourceRecordSets = de_ResourceRecordSets((0, smithy_client_1.getArrayIfSingleItem)(data["ResourceRecordSets"]["ResourceRecordSet"]), context);
    }
    return contents;
};
exports.de_ListResourceRecordSetsCommand = de_ListResourceRecordSetsCommand;
const de_ListResourceRecordSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListReusableDelegationSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListReusableDelegationSetsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DelegationSets === "") {
        contents.DelegationSets = [];
    }
    else if (data["DelegationSets"] !== undefined && data["DelegationSets"]["DelegationSet"] !== undefined) {
        contents.DelegationSets = de_DelegationSets((0, smithy_client_1.getArrayIfSingleItem)(data["DelegationSets"]["DelegationSet"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(data["Marker"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextMarker"] !== undefined) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data["NextMarker"]);
    }
    return contents;
};
exports.de_ListReusableDelegationSetsCommand = de_ListReusableDelegationSetsCommand;
const de_ListReusableDelegationSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ResourceTagSet"] !== undefined) {
        contents.ResourceTagSet = de_ResourceTagSet(data["ResourceTagSet"], context);
    }
    return contents;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await de_NoSuchHealthCheckRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await de_PriorRequestNotCompleteRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.route53#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListTagsForResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTagsForResourcesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ResourceTagSets === "") {
        contents.ResourceTagSets = [];
    }
    else if (data["ResourceTagSets"] !== undefined && data["ResourceTagSets"]["ResourceTagSet"] !== undefined) {
        contents.ResourceTagSets = de_ResourceTagSetList((0, smithy_client_1.getArrayIfSingleItem)(data["ResourceTagSets"]["ResourceTagSet"]), context);
    }
    return contents;
};
exports.de_ListTagsForResourcesCommand = de_ListTagsForResourcesCommand;
const de_ListTagsForResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await de_NoSuchHealthCheckRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await de_PriorRequestNotCompleteRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.route53#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListTrafficPoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTrafficPoliciesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["TrafficPolicyIdMarker"] !== undefined) {
        contents.TrafficPolicyIdMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyIdMarker"]);
    }
    if (data.TrafficPolicySummaries === "") {
        contents.TrafficPolicySummaries = [];
    }
    else if (data["TrafficPolicySummaries"] !== undefined &&
        data["TrafficPolicySummaries"]["TrafficPolicySummary"] !== undefined) {
        contents.TrafficPolicySummaries = de_TrafficPolicySummaries((0, smithy_client_1.getArrayIfSingleItem)(data["TrafficPolicySummaries"]["TrafficPolicySummary"]), context);
    }
    return contents;
};
exports.de_ListTrafficPoliciesCommand = de_ListTrafficPoliciesCommand;
const de_ListTrafficPoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListTrafficPolicyInstancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTrafficPolicyInstancesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZoneIdMarker"] !== undefined) {
        contents.HostedZoneIdMarker = (0, smithy_client_1.expectString)(data["HostedZoneIdMarker"]);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["TrafficPolicyInstanceNameMarker"] !== undefined) {
        contents.TrafficPolicyInstanceNameMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceNameMarker"]);
    }
    if (data["TrafficPolicyInstanceTypeMarker"] !== undefined) {
        contents.TrafficPolicyInstanceTypeMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceTypeMarker"]);
    }
    if (data.TrafficPolicyInstances === "") {
        contents.TrafficPolicyInstances = [];
    }
    else if (data["TrafficPolicyInstances"] !== undefined &&
        data["TrafficPolicyInstances"]["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstances = de_TrafficPolicyInstances((0, smithy_client_1.getArrayIfSingleItem)(data["TrafficPolicyInstances"]["TrafficPolicyInstance"]), context);
    }
    return contents;
};
exports.de_ListTrafficPolicyInstancesCommand = de_ListTrafficPolicyInstancesCommand;
const de_ListTrafficPolicyInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await de_NoSuchTrafficPolicyInstanceRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListTrafficPolicyInstancesByHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTrafficPolicyInstancesByHostedZoneCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["TrafficPolicyInstanceNameMarker"] !== undefined) {
        contents.TrafficPolicyInstanceNameMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceNameMarker"]);
    }
    if (data["TrafficPolicyInstanceTypeMarker"] !== undefined) {
        contents.TrafficPolicyInstanceTypeMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceTypeMarker"]);
    }
    if (data.TrafficPolicyInstances === "") {
        contents.TrafficPolicyInstances = [];
    }
    else if (data["TrafficPolicyInstances"] !== undefined &&
        data["TrafficPolicyInstances"]["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstances = de_TrafficPolicyInstances((0, smithy_client_1.getArrayIfSingleItem)(data["TrafficPolicyInstances"]["TrafficPolicyInstance"]), context);
    }
    return contents;
};
exports.de_ListTrafficPolicyInstancesByHostedZoneCommand = de_ListTrafficPolicyInstancesByHostedZoneCommand;
const de_ListTrafficPolicyInstancesByHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await de_NoSuchTrafficPolicyInstanceRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListTrafficPolicyInstancesByPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTrafficPolicyInstancesByPolicyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZoneIdMarker"] !== undefined) {
        contents.HostedZoneIdMarker = (0, smithy_client_1.expectString)(data["HostedZoneIdMarker"]);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["TrafficPolicyInstanceNameMarker"] !== undefined) {
        contents.TrafficPolicyInstanceNameMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceNameMarker"]);
    }
    if (data["TrafficPolicyInstanceTypeMarker"] !== undefined) {
        contents.TrafficPolicyInstanceTypeMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceTypeMarker"]);
    }
    if (data.TrafficPolicyInstances === "") {
        contents.TrafficPolicyInstances = [];
    }
    else if (data["TrafficPolicyInstances"] !== undefined &&
        data["TrafficPolicyInstances"]["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstances = de_TrafficPolicyInstances((0, smithy_client_1.getArrayIfSingleItem)(data["TrafficPolicyInstances"]["TrafficPolicyInstance"]), context);
    }
    return contents;
};
exports.de_ListTrafficPolicyInstancesByPolicyCommand = de_ListTrafficPolicyInstancesByPolicyCommand;
const de_ListTrafficPolicyInstancesByPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await de_NoSuchTrafficPolicyRes(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await de_NoSuchTrafficPolicyInstanceRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListTrafficPolicyVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTrafficPolicyVersionsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data.TrafficPolicies === "") {
        contents.TrafficPolicies = [];
    }
    else if (data["TrafficPolicies"] !== undefined && data["TrafficPolicies"]["TrafficPolicy"] !== undefined) {
        contents.TrafficPolicies = de_TrafficPolicies((0, smithy_client_1.getArrayIfSingleItem)(data["TrafficPolicies"]["TrafficPolicy"]), context);
    }
    if (data["TrafficPolicyVersionMarker"] !== undefined) {
        contents.TrafficPolicyVersionMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyVersionMarker"]);
    }
    return contents;
};
exports.de_ListTrafficPolicyVersionsCommand = de_ListTrafficPolicyVersionsCommand;
const de_ListTrafficPolicyVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await de_NoSuchTrafficPolicyRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_ListVPCAssociationAuthorizationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListVPCAssociationAuthorizationsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(data["HostedZoneId"]);
    }
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    if (data.VPCs === "") {
        contents.VPCs = [];
    }
    else if (data["VPCs"] !== undefined && data["VPCs"]["VPC"] !== undefined) {
        contents.VPCs = de_VPCs((0, smithy_client_1.getArrayIfSingleItem)(data["VPCs"]["VPC"]), context);
    }
    return contents;
};
exports.de_ListVPCAssociationAuthorizationsCommand = de_ListVPCAssociationAuthorizationsCommand;
const de_ListVPCAssociationAuthorizationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "InvalidPaginationToken":
        case "com.amazonaws.route53#InvalidPaginationToken":
            throw await de_InvalidPaginationTokenRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_TestDNSAnswerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_TestDNSAnswerCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Nameserver"] !== undefined) {
        contents.Nameserver = (0, smithy_client_1.expectString)(data["Nameserver"]);
    }
    if (data["Protocol"] !== undefined) {
        contents.Protocol = (0, smithy_client_1.expectString)(data["Protocol"]);
    }
    if (data.RecordData === "") {
        contents.RecordData = [];
    }
    else if (data["RecordData"] !== undefined && data["RecordData"]["RecordDataEntry"] !== undefined) {
        contents.RecordData = de_RecordData((0, smithy_client_1.getArrayIfSingleItem)(data["RecordData"]["RecordDataEntry"]), context);
    }
    if (data["RecordName"] !== undefined) {
        contents.RecordName = (0, smithy_client_1.expectString)(data["RecordName"]);
    }
    if (data["RecordType"] !== undefined) {
        contents.RecordType = (0, smithy_client_1.expectString)(data["RecordType"]);
    }
    if (data["ResponseCode"] !== undefined) {
        contents.ResponseCode = (0, smithy_client_1.expectString)(data["ResponseCode"]);
    }
    return contents;
};
exports.de_TestDNSAnswerCommand = de_TestDNSAnswerCommand;
const de_TestDNSAnswerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_UpdateHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateHealthCheckCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HealthCheck"] !== undefined) {
        contents.HealthCheck = de_HealthCheck(data["HealthCheck"], context);
    }
    return contents;
};
exports.de_UpdateHealthCheckCommand = de_UpdateHealthCheckCommand;
const de_UpdateHealthCheckCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HealthCheckVersionMismatch":
        case "com.amazonaws.route53#HealthCheckVersionMismatch":
            throw await de_HealthCheckVersionMismatchRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await de_NoSuchHealthCheckRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_UpdateHostedZoneCommentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateHostedZoneCommentCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZone"] !== undefined) {
        contents.HostedZone = de_HostedZone(data["HostedZone"], context);
    }
    return contents;
};
exports.de_UpdateHostedZoneCommentCommand = de_UpdateHostedZoneCommentCommand;
const de_UpdateHostedZoneCommentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await de_PriorRequestNotCompleteRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_UpdateTrafficPolicyCommentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateTrafficPolicyCommentCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicy"] !== undefined) {
        contents.TrafficPolicy = de_TrafficPolicy(data["TrafficPolicy"], context);
    }
    return contents;
};
exports.de_UpdateTrafficPolicyCommentCommand = de_UpdateTrafficPolicyCommentCommand;
const de_UpdateTrafficPolicyCommentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await de_NoSuchTrafficPolicyRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_UpdateTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateTrafficPolicyInstanceCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstance = de_TrafficPolicyInstance(data["TrafficPolicyInstance"], context);
    }
    return contents;
};
exports.de_UpdateTrafficPolicyInstanceCommand = de_UpdateTrafficPolicyInstanceCommand;
const de_UpdateTrafficPolicyInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictingTypes":
        case "com.amazonaws.route53#ConflictingTypes":
            throw await de_ConflictingTypesRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await de_NoSuchTrafficPolicyRes(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await de_NoSuchTrafficPolicyInstanceRes(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await de_PriorRequestNotCompleteRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const throwDefaultError = (0, smithy_client_1.withBaseException)(Route53ServiceException_1.Route53ServiceException);
const de_CidrBlockInUseExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.CidrBlockInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_CidrCollectionAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.CidrCollectionAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_CidrCollectionInUseExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.CidrCollectionInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_CidrCollectionVersionMismatchExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.CidrCollectionVersionMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_ConcurrentModificationRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.ConcurrentModification({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_ConflictingDomainExistsRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.ConflictingDomainExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_ConflictingTypesRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.ConflictingTypes({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_DelegationSetAlreadyCreatedRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DelegationSetAlreadyCreated({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_DelegationSetAlreadyReusableRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DelegationSetAlreadyReusable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_DelegationSetInUseRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DelegationSetInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_DelegationSetNotAvailableRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DelegationSetNotAvailable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_DelegationSetNotReusableRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DelegationSetNotReusable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_DNSSECNotFoundRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DNSSECNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_HealthCheckAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HealthCheckAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_HealthCheckInUseRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HealthCheckInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_HealthCheckVersionMismatchRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HealthCheckVersionMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_HostedZoneAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HostedZoneAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_HostedZoneNotEmptyRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HostedZoneNotEmpty({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_HostedZoneNotFoundRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HostedZoneNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_HostedZoneNotPrivateRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HostedZoneNotPrivate({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_HostedZonePartiallyDelegatedRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HostedZonePartiallyDelegated({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_IncompatibleVersionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.IncompatibleVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InsufficientCloudWatchLogsResourcePolicyRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InsufficientCloudWatchLogsResourcePolicy({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InvalidArgumentRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidArgument({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InvalidChangeBatchRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    if (data.messages === "") {
        contents.messages = [];
    }
    else if (data["messages"] !== undefined && data["messages"]["Message"] !== undefined) {
        contents.messages = de_ErrorMessages((0, smithy_client_1.getArrayIfSingleItem)(data["messages"]["Message"]), context);
    }
    const exception = new models_0_1.InvalidChangeBatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InvalidDomainNameRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidDomainName({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InvalidInputRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidInput({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InvalidKeySigningKeyNameRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidKeySigningKeyName({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InvalidKeySigningKeyStatusRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidKeySigningKeyStatus({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InvalidKMSArnRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidKMSArn({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InvalidPaginationTokenRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidPaginationToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InvalidSigningStatusRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidSigningStatus({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InvalidTrafficPolicyDocumentRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidTrafficPolicyDocument({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_InvalidVPCIdRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidVPCId({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_KeySigningKeyAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.KeySigningKeyAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_KeySigningKeyInParentDSRecordRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.KeySigningKeyInParentDSRecord({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_KeySigningKeyInUseRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.KeySigningKeyInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_KeySigningKeyWithActiveStatusNotFoundRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.KeySigningKeyWithActiveStatusNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_LastVPCAssociationRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.LastVPCAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_LimitsExceededRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.LimitsExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchChangeRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchChange({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchCidrCollectionExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.NoSuchCidrCollectionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchCidrLocationExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.NoSuchCidrLocationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchCloudWatchLogsLogGroupRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchCloudWatchLogsLogGroup({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchDelegationSetRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchDelegationSet({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchGeoLocationRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchGeoLocation({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchHealthCheckRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchHealthCheck({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchHostedZoneRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchHostedZone({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchKeySigningKeyRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchKeySigningKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchQueryLoggingConfigRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchQueryLoggingConfig({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchTrafficPolicyRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchTrafficPolicy({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NoSuchTrafficPolicyInstanceRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchTrafficPolicyInstance({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_NotAuthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NotAuthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_PriorRequestNotCompleteRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.PriorRequestNotComplete({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_PublicZoneVPCAssociationRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.PublicZoneVPCAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_QueryLoggingConfigAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.QueryLoggingConfigAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_TooManyHealthChecksRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyHealthChecks({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_TooManyHostedZonesRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyHostedZones({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_TooManyKeySigningKeysRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyKeySigningKeys({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_TooManyTrafficPoliciesRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyTrafficPolicies({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_TooManyTrafficPolicyInstancesRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyTrafficPolicyInstances({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_TooManyTrafficPolicyVersionsForCurrentPolicyRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyTrafficPolicyVersionsForCurrentPolicy({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_TooManyVPCAssociationAuthorizationsRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyVPCAssociationAuthorizations({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_TrafficPolicyAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TrafficPolicyAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_TrafficPolicyInstanceAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TrafficPolicyInstanceAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_TrafficPolicyInUseRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TrafficPolicyInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_VPCAssociationAuthorizationNotFoundRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.VPCAssociationAuthorizationNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const de_VPCAssociationNotFoundRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.VPCAssociationNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const se_AlarmIdentifier = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AlarmIdentifier");
    if (input.Region != null) {
        const node = xml_builder_1.XmlNode.of("CloudWatchRegion", input.Region).withName("Region");
        bodyNode.addChildNode(node);
    }
    if (input.Name != null) {
        const node = xml_builder_1.XmlNode.of("AlarmName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_AliasTarget = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AliasTarget");
    if (input.HostedZoneId != null) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
        bodyNode.addChildNode(node);
    }
    if (input.DNSName != null) {
        const node = xml_builder_1.XmlNode.of("DNSName", input.DNSName).withName("DNSName");
        bodyNode.addChildNode(node);
    }
    if (input.EvaluateTargetHealth != null) {
        const node = xml_builder_1.XmlNode
            .of("AliasHealthEnabled", String(input.EvaluateTargetHealth))
            .withName("EvaluateTargetHealth");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_Change = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Change");
    if (input.Action != null) {
        const node = xml_builder_1.XmlNode.of("ChangeAction", input.Action).withName("Action");
        bodyNode.addChildNode(node);
    }
    if (input.ResourceRecordSet != null) {
        const node = se_ResourceRecordSet(input.ResourceRecordSet, context).withName("ResourceRecordSet");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ChangeBatch = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ChangeBatch");
    if (input.Comment != null) {
        const node = xml_builder_1.XmlNode.of("ResourceDescription", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.Changes != null) {
        const nodes = se_Changes(input.Changes, context);
        const containerNode = new xml_builder_1.XmlNode("Changes");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
};
const se_Changes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = se_Change(entry, context);
        return node.withName("Change");
    });
};
const se_ChildHealthCheckList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("HealthCheckId", entry);
        return node.withName("ChildHealthCheck");
    });
};
const se_CidrCollectionChange = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("CidrCollectionChange");
    if (input.LocationName != null) {
        const node = xml_builder_1.XmlNode.of("CidrLocationNameDefaultNotAllowed", input.LocationName).withName("LocationName");
        bodyNode.addChildNode(node);
    }
    if (input.Action != null) {
        const node = xml_builder_1.XmlNode.of("CidrCollectionChangeAction", input.Action).withName("Action");
        bodyNode.addChildNode(node);
    }
    if (input.CidrList != null) {
        const nodes = se_CidrList(input.CidrList, context);
        const containerNode = new xml_builder_1.XmlNode("CidrList");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
};
const se_CidrCollectionChanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = se_CidrCollectionChange(entry, context);
        return node.withName("member");
    });
};
const se_CidrList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("Cidr", entry);
        return node.withName("Cidr");
    });
};
const se_CidrRoutingConfig = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("CidrRoutingConfig");
    if (input.CollectionId != null) {
        const node = xml_builder_1.XmlNode.of("UUID", input.CollectionId).withName("CollectionId");
        bodyNode.addChildNode(node);
    }
    if (input.LocationName != null) {
        const node = xml_builder_1.XmlNode.of("CidrLocationNameDefaultAllowed", input.LocationName).withName("LocationName");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_GeoLocation = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("GeoLocation");
    if (input.ContinentCode != null) {
        const node = xml_builder_1.XmlNode.of("GeoLocationContinentCode", input.ContinentCode).withName("ContinentCode");
        bodyNode.addChildNode(node);
    }
    if (input.CountryCode != null) {
        const node = xml_builder_1.XmlNode.of("GeoLocationCountryCode", input.CountryCode).withName("CountryCode");
        bodyNode.addChildNode(node);
    }
    if (input.SubdivisionCode != null) {
        const node = xml_builder_1.XmlNode.of("GeoLocationSubdivisionCode", input.SubdivisionCode).withName("SubdivisionCode");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_HealthCheckConfig = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("HealthCheckConfig");
    if (input.IPAddress != null) {
        const node = xml_builder_1.XmlNode.of("IPAddress", input.IPAddress).withName("IPAddress");
        bodyNode.addChildNode(node);
    }
    if (input.Port != null) {
        const node = xml_builder_1.XmlNode.of("Port", String(input.Port)).withName("Port");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
        const node = xml_builder_1.XmlNode.of("HealthCheckType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    if (input.ResourcePath != null) {
        const node = xml_builder_1.XmlNode.of("ResourcePath", input.ResourcePath).withName("ResourcePath");
        bodyNode.addChildNode(node);
    }
    if (input.FullyQualifiedDomainName != null) {
        const node = xml_builder_1.XmlNode
            .of("FullyQualifiedDomainName", input.FullyQualifiedDomainName)
            .withName("FullyQualifiedDomainName");
        bodyNode.addChildNode(node);
    }
    if (input.SearchString != null) {
        const node = xml_builder_1.XmlNode.of("SearchString", input.SearchString).withName("SearchString");
        bodyNode.addChildNode(node);
    }
    if (input.RequestInterval != null) {
        const node = xml_builder_1.XmlNode.of("RequestInterval", String(input.RequestInterval)).withName("RequestInterval");
        bodyNode.addChildNode(node);
    }
    if (input.FailureThreshold != null) {
        const node = xml_builder_1.XmlNode.of("FailureThreshold", String(input.FailureThreshold)).withName("FailureThreshold");
        bodyNode.addChildNode(node);
    }
    if (input.MeasureLatency != null) {
        const node = xml_builder_1.XmlNode.of("MeasureLatency", String(input.MeasureLatency)).withName("MeasureLatency");
        bodyNode.addChildNode(node);
    }
    if (input.Inverted != null) {
        const node = xml_builder_1.XmlNode.of("Inverted", String(input.Inverted)).withName("Inverted");
        bodyNode.addChildNode(node);
    }
    if (input.Disabled != null) {
        const node = xml_builder_1.XmlNode.of("Disabled", String(input.Disabled)).withName("Disabled");
        bodyNode.addChildNode(node);
    }
    if (input.HealthThreshold != null) {
        const node = xml_builder_1.XmlNode.of("HealthThreshold", String(input.HealthThreshold)).withName("HealthThreshold");
        bodyNode.addChildNode(node);
    }
    if (input.ChildHealthChecks != null) {
        const nodes = se_ChildHealthCheckList(input.ChildHealthChecks, context);
        const containerNode = new xml_builder_1.XmlNode("ChildHealthChecks");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.EnableSNI != null) {
        const node = xml_builder_1.XmlNode.of("EnableSNI", String(input.EnableSNI)).withName("EnableSNI");
        bodyNode.addChildNode(node);
    }
    if (input.Regions != null) {
        const nodes = se_HealthCheckRegionList(input.Regions, context);
        const containerNode = new xml_builder_1.XmlNode("Regions");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.AlarmIdentifier != null) {
        const node = se_AlarmIdentifier(input.AlarmIdentifier, context).withName("AlarmIdentifier");
        bodyNode.addChildNode(node);
    }
    if (input.InsufficientDataHealthStatus != null) {
        const node = xml_builder_1.XmlNode
            .of("InsufficientDataHealthStatus", input.InsufficientDataHealthStatus)
            .withName("InsufficientDataHealthStatus");
        bodyNode.addChildNode(node);
    }
    if (input.RoutingControlArn != null) {
        const node = xml_builder_1.XmlNode.of("RoutingControlArn", input.RoutingControlArn).withName("RoutingControlArn");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_HealthCheckRegionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("HealthCheckRegion", entry);
        return node.withName("Region");
    });
};
const se_HostedZoneConfig = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("HostedZoneConfig");
    if (input.Comment != null) {
        const node = xml_builder_1.XmlNode.of("ResourceDescription", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.PrivateZone != null) {
        const node = xml_builder_1.XmlNode.of("IsPrivateZone", String(input.PrivateZone)).withName("PrivateZone");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ResettableElementNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("ResettableElementName", entry);
        return node.withName("ResettableElementName");
    });
};
const se_ResourceRecord = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ResourceRecord");
    if (input.Value != null) {
        const node = xml_builder_1.XmlNode.of("RData", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_ResourceRecords = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = se_ResourceRecord(entry, context);
        return node.withName("ResourceRecord");
    });
};
const se_ResourceRecordSet = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ResourceRecordSet");
    if (input.Name != null) {
        const node = xml_builder_1.XmlNode.of("DNSName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
        const node = xml_builder_1.XmlNode.of("RRType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    if (input.SetIdentifier != null) {
        const node = xml_builder_1.XmlNode.of("ResourceRecordSetIdentifier", input.SetIdentifier).withName("SetIdentifier");
        bodyNode.addChildNode(node);
    }
    if (input.Weight != null) {
        const node = xml_builder_1.XmlNode.of("ResourceRecordSetWeight", String(input.Weight)).withName("Weight");
        bodyNode.addChildNode(node);
    }
    if (input.Region != null) {
        const node = xml_builder_1.XmlNode.of("ResourceRecordSetRegion", input.Region).withName("Region");
        bodyNode.addChildNode(node);
    }
    if (input.GeoLocation != null) {
        const node = se_GeoLocation(input.GeoLocation, context).withName("GeoLocation");
        bodyNode.addChildNode(node);
    }
    if (input.Failover != null) {
        const node = xml_builder_1.XmlNode.of("ResourceRecordSetFailover", input.Failover).withName("Failover");
        bodyNode.addChildNode(node);
    }
    if (input.MultiValueAnswer != null) {
        const node = xml_builder_1.XmlNode
            .of("ResourceRecordSetMultiValueAnswer", String(input.MultiValueAnswer))
            .withName("MultiValueAnswer");
        bodyNode.addChildNode(node);
    }
    if (input.TTL != null) {
        const node = xml_builder_1.XmlNode.of("TTL", String(input.TTL)).withName("TTL");
        bodyNode.addChildNode(node);
    }
    if (input.ResourceRecords != null) {
        const nodes = se_ResourceRecords(input.ResourceRecords, context);
        const containerNode = new xml_builder_1.XmlNode("ResourceRecords");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.AliasTarget != null) {
        const node = se_AliasTarget(input.AliasTarget, context).withName("AliasTarget");
        bodyNode.addChildNode(node);
    }
    if (input.HealthCheckId != null) {
        const node = xml_builder_1.XmlNode.of("HealthCheckId", input.HealthCheckId).withName("HealthCheckId");
        bodyNode.addChildNode(node);
    }
    if (input.TrafficPolicyInstanceId != null) {
        const node = xml_builder_1.XmlNode
            .of("TrafficPolicyInstanceId", input.TrafficPolicyInstanceId)
            .withName("TrafficPolicyInstanceId");
        bodyNode.addChildNode(node);
    }
    if (input.CidrRoutingConfig != null) {
        const node = se_CidrRoutingConfig(input.CidrRoutingConfig, context).withName("CidrRoutingConfig");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_Tag = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Tag");
    if (input.Key != null) {
        const node = xml_builder_1.XmlNode.of("TagKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        const node = xml_builder_1.XmlNode.of("TagValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const se_TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("TagKey", entry);
        return node.withName("Key");
    });
};
const se_TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = se_Tag(entry, context);
        return node.withName("Tag");
    });
};
const se_TagResourceIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("TagResourceId", entry);
        return node.withName("ResourceId");
    });
};
const se_VPC = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("VPC");
    if (input.VPCRegion != null) {
        const node = xml_builder_1.XmlNode.of("VPCRegion", input.VPCRegion).withName("VPCRegion");
        bodyNode.addChildNode(node);
    }
    if (input.VPCId != null) {
        const node = xml_builder_1.XmlNode.of("VPCId", input.VPCId).withName("VPCId");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const de_AccountLimit = (output, context) => {
    const contents = {};
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.strictParseLong)(output["Value"]);
    }
    return contents;
};
const de_AlarmIdentifier = (output, context) => {
    const contents = {};
    if (output["Region"] !== undefined) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    return contents;
};
const de_AliasTarget = (output, context) => {
    const contents = {};
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
    }
    if (output["DNSName"] !== undefined) {
        contents.DNSName = (0, smithy_client_1.expectString)(output["DNSName"]);
    }
    if (output["EvaluateTargetHealth"] !== undefined) {
        contents.EvaluateTargetHealth = (0, smithy_client_1.parseBoolean)(output["EvaluateTargetHealth"]);
    }
    return contents;
};
const de_ChangeInfo = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["SubmittedAt"] !== undefined) {
        contents.SubmittedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["SubmittedAt"]));
    }
    if (output["Comment"] !== undefined) {
        contents.Comment = (0, smithy_client_1.expectString)(output["Comment"]);
    }
    return contents;
};
const de_CheckerIpRanges = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_ChildHealthCheckList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_CidrBlockSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CidrBlockSummary(entry, context);
    });
};
const de_CidrBlockSummary = (output, context) => {
    const contents = {};
    if (output["CidrBlock"] !== undefined) {
        contents.CidrBlock = (0, smithy_client_1.expectString)(output["CidrBlock"]);
    }
    if (output["LocationName"] !== undefined) {
        contents.LocationName = (0, smithy_client_1.expectString)(output["LocationName"]);
    }
    return contents;
};
const de_CidrCollection = (output, context) => {
    const contents = {};
    if (output["Arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
    }
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = (0, smithy_client_1.strictParseLong)(output["Version"]);
    }
    return contents;
};
const de_CidrRoutingConfig = (output, context) => {
    const contents = {};
    if (output["CollectionId"] !== undefined) {
        contents.CollectionId = (0, smithy_client_1.expectString)(output["CollectionId"]);
    }
    if (output["LocationName"] !== undefined) {
        contents.LocationName = (0, smithy_client_1.expectString)(output["LocationName"]);
    }
    return contents;
};
const de_CloudWatchAlarmConfiguration = (output, context) => {
    const contents = {};
    if (output["EvaluationPeriods"] !== undefined) {
        contents.EvaluationPeriods = (0, smithy_client_1.strictParseInt32)(output["EvaluationPeriods"]);
    }
    if (output["Threshold"] !== undefined) {
        contents.Threshold = (0, smithy_client_1.strictParseFloat)(output["Threshold"]);
    }
    if (output["ComparisonOperator"] !== undefined) {
        contents.ComparisonOperator = (0, smithy_client_1.expectString)(output["ComparisonOperator"]);
    }
    if (output["Period"] !== undefined) {
        contents.Period = (0, smithy_client_1.strictParseInt32)(output["Period"]);
    }
    if (output["MetricName"] !== undefined) {
        contents.MetricName = (0, smithy_client_1.expectString)(output["MetricName"]);
    }
    if (output["Namespace"] !== undefined) {
        contents.Namespace = (0, smithy_client_1.expectString)(output["Namespace"]);
    }
    if (output["Statistic"] !== undefined) {
        contents.Statistic = (0, smithy_client_1.expectString)(output["Statistic"]);
    }
    if (output.Dimensions === "") {
        contents.Dimensions = [];
    }
    else if (output["Dimensions"] !== undefined && output["Dimensions"]["Dimension"] !== undefined) {
        contents.Dimensions = de_DimensionList((0, smithy_client_1.getArrayIfSingleItem)(output["Dimensions"]["Dimension"]), context);
    }
    return contents;
};
const de_CollectionSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CollectionSummary(entry, context);
    });
};
const de_CollectionSummary = (output, context) => {
    const contents = {};
    if (output["Arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
    }
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = (0, smithy_client_1.strictParseLong)(output["Version"]);
    }
    return contents;
};
const de_DelegationSet = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["CallerReference"] !== undefined) {
        contents.CallerReference = (0, smithy_client_1.expectString)(output["CallerReference"]);
    }
    if (output.NameServers === "") {
        contents.NameServers = [];
    }
    else if (output["NameServers"] !== undefined && output["NameServers"]["NameServer"] !== undefined) {
        contents.NameServers = de_DelegationSetNameServers((0, smithy_client_1.getArrayIfSingleItem)(output["NameServers"]["NameServer"]), context);
    }
    return contents;
};
const de_DelegationSetNameServers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_DelegationSets = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DelegationSet(entry, context);
    });
};
const de_Dimension = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const de_DimensionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Dimension(entry, context);
    });
};
const de_DNSSECStatus = (output, context) => {
    const contents = {};
    if (output["ServeSignature"] !== undefined) {
        contents.ServeSignature = (0, smithy_client_1.expectString)(output["ServeSignature"]);
    }
    if (output["StatusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["StatusMessage"]);
    }
    return contents;
};
const de_ErrorMessages = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_GeoLocation = (output, context) => {
    const contents = {};
    if (output["ContinentCode"] !== undefined) {
        contents.ContinentCode = (0, smithy_client_1.expectString)(output["ContinentCode"]);
    }
    if (output["CountryCode"] !== undefined) {
        contents.CountryCode = (0, smithy_client_1.expectString)(output["CountryCode"]);
    }
    if (output["SubdivisionCode"] !== undefined) {
        contents.SubdivisionCode = (0, smithy_client_1.expectString)(output["SubdivisionCode"]);
    }
    return contents;
};
const de_GeoLocationDetails = (output, context) => {
    const contents = {};
    if (output["ContinentCode"] !== undefined) {
        contents.ContinentCode = (0, smithy_client_1.expectString)(output["ContinentCode"]);
    }
    if (output["ContinentName"] !== undefined) {
        contents.ContinentName = (0, smithy_client_1.expectString)(output["ContinentName"]);
    }
    if (output["CountryCode"] !== undefined) {
        contents.CountryCode = (0, smithy_client_1.expectString)(output["CountryCode"]);
    }
    if (output["CountryName"] !== undefined) {
        contents.CountryName = (0, smithy_client_1.expectString)(output["CountryName"]);
    }
    if (output["SubdivisionCode"] !== undefined) {
        contents.SubdivisionCode = (0, smithy_client_1.expectString)(output["SubdivisionCode"]);
    }
    if (output["SubdivisionName"] !== undefined) {
        contents.SubdivisionName = (0, smithy_client_1.expectString)(output["SubdivisionName"]);
    }
    return contents;
};
const de_GeoLocationDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GeoLocationDetails(entry, context);
    });
};
const de_HealthCheck = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["CallerReference"] !== undefined) {
        contents.CallerReference = (0, smithy_client_1.expectString)(output["CallerReference"]);
    }
    if (output["LinkedService"] !== undefined) {
        contents.LinkedService = de_LinkedService(output["LinkedService"], context);
    }
    if (output["HealthCheckConfig"] !== undefined) {
        contents.HealthCheckConfig = de_HealthCheckConfig(output["HealthCheckConfig"], context);
    }
    if (output["HealthCheckVersion"] !== undefined) {
        contents.HealthCheckVersion = (0, smithy_client_1.strictParseLong)(output["HealthCheckVersion"]);
    }
    if (output["CloudWatchAlarmConfiguration"] !== undefined) {
        contents.CloudWatchAlarmConfiguration = de_CloudWatchAlarmConfiguration(output["CloudWatchAlarmConfiguration"], context);
    }
    return contents;
};
const de_HealthCheckConfig = (output, context) => {
    const contents = {};
    if (output["IPAddress"] !== undefined) {
        contents.IPAddress = (0, smithy_client_1.expectString)(output["IPAddress"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["ResourcePath"] !== undefined) {
        contents.ResourcePath = (0, smithy_client_1.expectString)(output["ResourcePath"]);
    }
    if (output["FullyQualifiedDomainName"] !== undefined) {
        contents.FullyQualifiedDomainName = (0, smithy_client_1.expectString)(output["FullyQualifiedDomainName"]);
    }
    if (output["SearchString"] !== undefined) {
        contents.SearchString = (0, smithy_client_1.expectString)(output["SearchString"]);
    }
    if (output["RequestInterval"] !== undefined) {
        contents.RequestInterval = (0, smithy_client_1.strictParseInt32)(output["RequestInterval"]);
    }
    if (output["FailureThreshold"] !== undefined) {
        contents.FailureThreshold = (0, smithy_client_1.strictParseInt32)(output["FailureThreshold"]);
    }
    if (output["MeasureLatency"] !== undefined) {
        contents.MeasureLatency = (0, smithy_client_1.parseBoolean)(output["MeasureLatency"]);
    }
    if (output["Inverted"] !== undefined) {
        contents.Inverted = (0, smithy_client_1.parseBoolean)(output["Inverted"]);
    }
    if (output["Disabled"] !== undefined) {
        contents.Disabled = (0, smithy_client_1.parseBoolean)(output["Disabled"]);
    }
    if (output["HealthThreshold"] !== undefined) {
        contents.HealthThreshold = (0, smithy_client_1.strictParseInt32)(output["HealthThreshold"]);
    }
    if (output.ChildHealthChecks === "") {
        contents.ChildHealthChecks = [];
    }
    else if (output["ChildHealthChecks"] !== undefined &&
        output["ChildHealthChecks"]["ChildHealthCheck"] !== undefined) {
        contents.ChildHealthChecks = de_ChildHealthCheckList((0, smithy_client_1.getArrayIfSingleItem)(output["ChildHealthChecks"]["ChildHealthCheck"]), context);
    }
    if (output["EnableSNI"] !== undefined) {
        contents.EnableSNI = (0, smithy_client_1.parseBoolean)(output["EnableSNI"]);
    }
    if (output.Regions === "") {
        contents.Regions = [];
    }
    else if (output["Regions"] !== undefined && output["Regions"]["Region"] !== undefined) {
        contents.Regions = de_HealthCheckRegionList((0, smithy_client_1.getArrayIfSingleItem)(output["Regions"]["Region"]), context);
    }
    if (output["AlarmIdentifier"] !== undefined) {
        contents.AlarmIdentifier = de_AlarmIdentifier(output["AlarmIdentifier"], context);
    }
    if (output["InsufficientDataHealthStatus"] !== undefined) {
        contents.InsufficientDataHealthStatus = (0, smithy_client_1.expectString)(output["InsufficientDataHealthStatus"]);
    }
    if (output["RoutingControlArn"] !== undefined) {
        contents.RoutingControlArn = (0, smithy_client_1.expectString)(output["RoutingControlArn"]);
    }
    return contents;
};
const de_HealthCheckObservation = (output, context) => {
    const contents = {};
    if (output["Region"] !== undefined) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
    }
    if (output["IPAddress"] !== undefined) {
        contents.IPAddress = (0, smithy_client_1.expectString)(output["IPAddress"]);
    }
    if (output["StatusReport"] !== undefined) {
        contents.StatusReport = de_StatusReport(output["StatusReport"], context);
    }
    return contents;
};
const de_HealthCheckObservations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HealthCheckObservation(entry, context);
    });
};
const de_HealthCheckRegionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_HealthChecks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HealthCheck(entry, context);
    });
};
const de_HostedZone = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["CallerReference"] !== undefined) {
        contents.CallerReference = (0, smithy_client_1.expectString)(output["CallerReference"]);
    }
    if (output["Config"] !== undefined) {
        contents.Config = de_HostedZoneConfig(output["Config"], context);
    }
    if (output["ResourceRecordSetCount"] !== undefined) {
        contents.ResourceRecordSetCount = (0, smithy_client_1.strictParseLong)(output["ResourceRecordSetCount"]);
    }
    if (output["LinkedService"] !== undefined) {
        contents.LinkedService = de_LinkedService(output["LinkedService"], context);
    }
    return contents;
};
const de_HostedZoneConfig = (output, context) => {
    const contents = {};
    if (output["Comment"] !== undefined) {
        contents.Comment = (0, smithy_client_1.expectString)(output["Comment"]);
    }
    if (output["PrivateZone"] !== undefined) {
        contents.PrivateZone = (0, smithy_client_1.parseBoolean)(output["PrivateZone"]);
    }
    return contents;
};
const de_HostedZoneLimit = (output, context) => {
    const contents = {};
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.strictParseLong)(output["Value"]);
    }
    return contents;
};
const de_HostedZoneOwner = (output, context) => {
    const contents = {};
    if (output["OwningAccount"] !== undefined) {
        contents.OwningAccount = (0, smithy_client_1.expectString)(output["OwningAccount"]);
    }
    if (output["OwningService"] !== undefined) {
        contents.OwningService = (0, smithy_client_1.expectString)(output["OwningService"]);
    }
    return contents;
};
const de_HostedZones = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostedZone(entry, context);
    });
};
const de_HostedZoneSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostedZoneSummary(entry, context);
    });
};
const de_HostedZoneSummary = (output, context) => {
    const contents = {};
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Owner"] !== undefined) {
        contents.Owner = de_HostedZoneOwner(output["Owner"], context);
    }
    return contents;
};
const de_KeySigningKey = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["KmsArn"] !== undefined) {
        contents.KmsArn = (0, smithy_client_1.expectString)(output["KmsArn"]);
    }
    if (output["Flag"] !== undefined) {
        contents.Flag = (0, smithy_client_1.strictParseInt32)(output["Flag"]);
    }
    if (output["SigningAlgorithmMnemonic"] !== undefined) {
        contents.SigningAlgorithmMnemonic = (0, smithy_client_1.expectString)(output["SigningAlgorithmMnemonic"]);
    }
    if (output["SigningAlgorithmType"] !== undefined) {
        contents.SigningAlgorithmType = (0, smithy_client_1.strictParseInt32)(output["SigningAlgorithmType"]);
    }
    if (output["DigestAlgorithmMnemonic"] !== undefined) {
        contents.DigestAlgorithmMnemonic = (0, smithy_client_1.expectString)(output["DigestAlgorithmMnemonic"]);
    }
    if (output["DigestAlgorithmType"] !== undefined) {
        contents.DigestAlgorithmType = (0, smithy_client_1.strictParseInt32)(output["DigestAlgorithmType"]);
    }
    if (output["KeyTag"] !== undefined) {
        contents.KeyTag = (0, smithy_client_1.strictParseInt32)(output["KeyTag"]);
    }
    if (output["DigestValue"] !== undefined) {
        contents.DigestValue = (0, smithy_client_1.expectString)(output["DigestValue"]);
    }
    if (output["PublicKey"] !== undefined) {
        contents.PublicKey = (0, smithy_client_1.expectString)(output["PublicKey"]);
    }
    if (output["DSRecord"] !== undefined) {
        contents.DSRecord = (0, smithy_client_1.expectString)(output["DSRecord"]);
    }
    if (output["DNSKEYRecord"] !== undefined) {
        contents.DNSKEYRecord = (0, smithy_client_1.expectString)(output["DNSKEYRecord"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["StatusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["StatusMessage"]);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreatedDate"]));
    }
    if (output["LastModifiedDate"] !== undefined) {
        contents.LastModifiedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastModifiedDate"]));
    }
    return contents;
};
const de_KeySigningKeys = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KeySigningKey(entry, context);
    });
};
const de_LinkedService = (output, context) => {
    const contents = {};
    if (output["ServicePrincipal"] !== undefined) {
        contents.ServicePrincipal = (0, smithy_client_1.expectString)(output["ServicePrincipal"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    return contents;
};
const de_LocationSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocationSummary(entry, context);
    });
};
const de_LocationSummary = (output, context) => {
    const contents = {};
    if (output["LocationName"] !== undefined) {
        contents.LocationName = (0, smithy_client_1.expectString)(output["LocationName"]);
    }
    return contents;
};
const de_QueryLoggingConfig = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
    }
    if (output["CloudWatchLogsLogGroupArn"] !== undefined) {
        contents.CloudWatchLogsLogGroupArn = (0, smithy_client_1.expectString)(output["CloudWatchLogsLogGroupArn"]);
    }
    return contents;
};
const de_QueryLoggingConfigs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QueryLoggingConfig(entry, context);
    });
};
const de_RecordData = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const de_ResourceRecord = (output, context) => {
    const contents = {};
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const de_ResourceRecords = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceRecord(entry, context);
    });
};
const de_ResourceRecordSet = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["SetIdentifier"] !== undefined) {
        contents.SetIdentifier = (0, smithy_client_1.expectString)(output["SetIdentifier"]);
    }
    if (output["Weight"] !== undefined) {
        contents.Weight = (0, smithy_client_1.strictParseLong)(output["Weight"]);
    }
    if (output["Region"] !== undefined) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
    }
    if (output["GeoLocation"] !== undefined) {
        contents.GeoLocation = de_GeoLocation(output["GeoLocation"], context);
    }
    if (output["Failover"] !== undefined) {
        contents.Failover = (0, smithy_client_1.expectString)(output["Failover"]);
    }
    if (output["MultiValueAnswer"] !== undefined) {
        contents.MultiValueAnswer = (0, smithy_client_1.parseBoolean)(output["MultiValueAnswer"]);
    }
    if (output["TTL"] !== undefined) {
        contents.TTL = (0, smithy_client_1.strictParseLong)(output["TTL"]);
    }
    if (output.ResourceRecords === "") {
        contents.ResourceRecords = [];
    }
    else if (output["ResourceRecords"] !== undefined && output["ResourceRecords"]["ResourceRecord"] !== undefined) {
        contents.ResourceRecords = de_ResourceRecords((0, smithy_client_1.getArrayIfSingleItem)(output["ResourceRecords"]["ResourceRecord"]), context);
    }
    if (output["AliasTarget"] !== undefined) {
        contents.AliasTarget = de_AliasTarget(output["AliasTarget"], context);
    }
    if (output["HealthCheckId"] !== undefined) {
        contents.HealthCheckId = (0, smithy_client_1.expectString)(output["HealthCheckId"]);
    }
    if (output["TrafficPolicyInstanceId"] !== undefined) {
        contents.TrafficPolicyInstanceId = (0, smithy_client_1.expectString)(output["TrafficPolicyInstanceId"]);
    }
    if (output["CidrRoutingConfig"] !== undefined) {
        contents.CidrRoutingConfig = de_CidrRoutingConfig(output["CidrRoutingConfig"], context);
    }
    return contents;
};
const de_ResourceRecordSets = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceRecordSet(entry, context);
    });
};
const de_ResourceTagSet = (output, context) => {
    const contents = {};
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
    }
    if (output["ResourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["ResourceId"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = de_TagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const de_ResourceTagSetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceTagSet(entry, context);
    });
};
const de_ReusableDelegationSetLimit = (output, context) => {
    const contents = {};
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.strictParseLong)(output["Value"]);
    }
    return contents;
};
const de_StatusReport = (output, context) => {
    const contents = {};
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["CheckedTime"] !== undefined) {
        contents.CheckedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CheckedTime"]));
    }
    return contents;
};
const de_Tag = (output, context) => {
    const contents = {};
    if (output["Key"] !== undefined) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const de_TagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry, context);
    });
};
const de_TrafficPolicies = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficPolicy(entry, context);
    });
};
const de_TrafficPolicy = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = (0, smithy_client_1.strictParseInt32)(output["Version"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["Document"] !== undefined) {
        contents.Document = (0, smithy_client_1.expectString)(output["Document"]);
    }
    if (output["Comment"] !== undefined) {
        contents.Comment = (0, smithy_client_1.expectString)(output["Comment"]);
    }
    return contents;
};
const de_TrafficPolicyInstance = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["TTL"] !== undefined) {
        contents.TTL = (0, smithy_client_1.strictParseLong)(output["TTL"]);
    }
    if (output["State"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
    }
    if (output["TrafficPolicyId"] !== undefined) {
        contents.TrafficPolicyId = (0, smithy_client_1.expectString)(output["TrafficPolicyId"]);
    }
    if (output["TrafficPolicyVersion"] !== undefined) {
        contents.TrafficPolicyVersion = (0, smithy_client_1.strictParseInt32)(output["TrafficPolicyVersion"]);
    }
    if (output["TrafficPolicyType"] !== undefined) {
        contents.TrafficPolicyType = (0, smithy_client_1.expectString)(output["TrafficPolicyType"]);
    }
    return contents;
};
const de_TrafficPolicyInstances = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficPolicyInstance(entry, context);
    });
};
const de_TrafficPolicySummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficPolicySummary(entry, context);
    });
};
const de_TrafficPolicySummary = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["LatestVersion"] !== undefined) {
        contents.LatestVersion = (0, smithy_client_1.strictParseInt32)(output["LatestVersion"]);
    }
    if (output["TrafficPolicyCount"] !== undefined) {
        contents.TrafficPolicyCount = (0, smithy_client_1.strictParseInt32)(output["TrafficPolicyCount"]);
    }
    return contents;
};
const de_VPC = (output, context) => {
    const contents = {};
    if (output["VPCRegion"] !== undefined) {
        contents.VPCRegion = (0, smithy_client_1.expectString)(output["VPCRegion"]);
    }
    if (output["VPCId"] !== undefined) {
        contents.VPCId = (0, smithy_client_1.expectString)(output["VPCId"]);
    }
    return contents;
};
const de_VPCs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VPC(entry, context);
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
            attributeNamePrefix: "",
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_, val) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const loadRestXmlErrorCode = (output, data) => {
    if (data.Error?.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
