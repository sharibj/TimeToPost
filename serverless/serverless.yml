org: sharibxw
app: time-to-post
service: serverless
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  region: eu-central-1
  iam:
    role:
      name: get-param-role
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource: "arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/time-to-post/*"

custom:
  serverlessSsmFetch:
    COGNITO_URL: /time-to-post/cognito-hostedui-url
    COGNITO_USERPOOL_ID: /time-to-post/cognito-userpool-id
    COGNITO_IDENTITYPOOL_ID: /time-to-post/cognito-identitypool-id
    COGNITO_CLIENT_ID: /time-to-post/cognito-client-id
    COGNITO_DOMAIN: /time-to-post/cognito-domain
    LOGIN_URI: /time-to-post/login-url

resources:
  Resources:
    pushLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: TimeToPostScheduledLambdaRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DynamoPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: dynamodb:GetItem
                  Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/Time-To-Post-Tokens-Table"
          - PolicyName: S3Policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                  Resource:
                    - "arn:aws:s3:::time-to-post-pool-bucket"
                    - "arn:aws:s3:::time-to-post-pool-bucket/*"
functions:
  push:
    handler: src/push.handler
    role: pushLambdaRole
    environment:
      REGION: "${aws:region}"
      DYNAMO_TABLE_NAME: "Time-To-Post-Tokens-Table"
      POSTS_BUCKET_NAME: "time-to-post-pool-bucket"
      POSTS_OBJECT_NAME: "posts.txt"
  login:
    handler: src/login.handler
    environment:
      COGNITO_URL: ${ssm:/time-to-post/cognito-hostedui-url}
      COGNITO_USERPOOL_ID: ${ssm:/time-to-post/cognito-userpool-id}
      COGNITO_IDENTITYPOOL_ID: ${ssm:/time-to-post/cognito-identitypool-id}
      COGNITO_CLIENT_ID: ${ssm:/time-to-post/cognito-client-id}
      COGNITO_DOMAIN: ${ssm:/time-to-post/cognito-domain}
      LOGIN_URI: ${ssm:/time-to-post/login-url}
      REGION: "${aws:region}"
      DYNAMO_TABLE_NAME: "Time-To-Post-Tokens-Table"
      POSTS_BUCKET_NAME: "time-to-post-pool-bucket"
      POSTS_OBJECT_NAME: "posts.txt"
    events:
      - http:
          method: get
          path: time-to-post
  authorize:
    handler: src/authorize.handler
    environment:
      LINKEDIN_AUTH_URL: ${ssm:/time-to-post/linkedin-auth-url}
      LINKEDIN_ACCESS_TOKEN_URL: ${ssm:/time-to-post/linkedin-access-token-url}
      LINKEDIN_CLIENT_ID: ${ssm:/time-to-post/linkedin-client-id}
      LINKEDIN_AUTH_REDIRECT_URI: ${ssm:/time-to-post/linkedin-auth-redirect-uri}
      LINKEDIN_AUTH_SCOPE: ${ssm:/time-to-post/linkedin-auth-scope}
      LOGIN_URI: ${ssm:/time-to-post/login-url}
    events:
      - http:
          method: get
          path: time-to-post/authorize

plugins:
  - serverless-python-requirements
